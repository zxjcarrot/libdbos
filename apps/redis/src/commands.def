/* Automatically generated by generate-command-code.py, do not edit. */


/* We have fabulous commands from
 * the fantastic
 * Redis Command Table! */

/* Must match redisCommandGroup */
const char *COMMAND_GROUP_STR[] = {
    "generic",
    "string",
    "list",
    "set",
    "sorted-set",
    "hash",
    "pubsub",
    "transactions",
    "connection",
    "server",
    "scripting",
    "hyperloglog",
    "cluster",
    "sentinel",
    "geo",
    "stream",
    "bitmap",
    "module"
};

const char *commandGroupStr(int index) {
    return COMMAND_GROUP_STR[index];
}
/********** BITCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITCOUNT history */
commandHistory BITCOUNT_History[] = {
{"7.0.0","Added the `BYTE|BIT` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITCOUNT tips */
#define BITCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITCOUNT key specs */
keySpec BITCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITCOUNT range unit argument table */
struct COMMAND_ARG BITCOUNT_range_unit_Subargs[] = {
{MAKE_ARG("byte",ARG_TYPE_PURE_TOKEN,-1,"BYTE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_PURE_TOKEN,-1,"BIT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITCOUNT range argument table */
struct COMMAND_ARG BITCOUNT_range_Subargs[] = {
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=BITCOUNT_range_unit_Subargs},
};

/* BITCOUNT argument table */
struct COMMAND_ARG BITCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=BITCOUNT_range_Subargs},
};

/********** BITFIELD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITFIELD history */
#define BITFIELD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITFIELD tips */
#define BITFIELD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITFIELD key specs */
keySpec BITFIELD_Keyspecs[1] = {
{"This command allows both access and modification of the key",CMD_KEY_RW|CMD_KEY_UPDATE|CMD_KEY_ACCESS|CMD_KEY_VARIABLE_FLAGS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITFIELD operation get_block argument table */
struct COMMAND_ARG BITFIELD_operation_get_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write overflow_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_overflow_block_Subargs[] = {
{MAKE_ARG("wrap",ARG_TYPE_PURE_TOKEN,-1,"WRAP",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sat",ARG_TYPE_PURE_TOKEN,-1,"SAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fail",ARG_TYPE_PURE_TOKEN,-1,"FAIL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation set_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_set_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation incrby_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_incrby_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_Subargs[] = {
{MAKE_ARG("set-block",ARG_TYPE_BLOCK,-1,"SET",NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=BITFIELD_operation_write_write_operation_set_block_Subargs},
{MAKE_ARG("incrby-block",ARG_TYPE_BLOCK,-1,"INCRBY",NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=BITFIELD_operation_write_write_operation_incrby_block_Subargs},
};

/* BITFIELD operation write argument table */
struct COMMAND_ARG BITFIELD_operation_write_Subargs[] = {
{MAKE_ARG("overflow-block",ARG_TYPE_ONEOF,-1,"OVERFLOW",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=BITFIELD_operation_write_overflow_block_Subargs},
{MAKE_ARG("write-operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_write_write_operation_Subargs},
};

/* BITFIELD operation argument table */
struct COMMAND_ARG BITFIELD_operation_Subargs[] = {
{MAKE_ARG("get-block",ARG_TYPE_BLOCK,-1,"GET",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_get_block_Subargs},
{MAKE_ARG("write",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_write_Subargs},
};

/* BITFIELD argument table */
struct COMMAND_ARG BITFIELD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,2,NULL),.subargs=BITFIELD_operation_Subargs},
};

/********** BITFIELD_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITFIELD_RO history */
#define BITFIELD_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITFIELD_RO tips */
#define BITFIELD_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITFIELD_RO key specs */
keySpec BITFIELD_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITFIELD_RO get_block argument table */
struct COMMAND_ARG BITFIELD_RO_get_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD_RO argument table */
struct COMMAND_ARG BITFIELD_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("get-block",ARG_TYPE_BLOCK,-1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,2,NULL),.subargs=BITFIELD_RO_get_block_Subargs},
};

/********** BITOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITOP history */
#define BITOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITOP tips */
#define BITOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITOP key specs */
keySpec BITOP_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={3},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* BITOP operation argument table */
struct COMMAND_ARG BITOP_operation_Subargs[] = {
{MAKE_ARG("and",ARG_TYPE_PURE_TOKEN,-1,"AND",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("or",ARG_TYPE_PURE_TOKEN,-1,"OR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xor",ARG_TYPE_PURE_TOKEN,-1,"XOR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("not",ARG_TYPE_PURE_TOKEN,-1,"NOT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITOP argument table */
struct COMMAND_ARG BITOP_Args[] = {
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=BITOP_operation_Subargs},
{MAKE_ARG("destkey",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** BITPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITPOS history */
commandHistory BITPOS_History[] = {
{"7.0.0","Added the `BYTE|BIT` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITPOS tips */
#define BITPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITPOS key specs */
keySpec BITPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITPOS range end_unit_block unit argument table */
struct COMMAND_ARG BITPOS_range_end_unit_block_unit_Subargs[] = {
{MAKE_ARG("byte",ARG_TYPE_PURE_TOKEN,-1,"BYTE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_PURE_TOKEN,-1,"BIT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITPOS range end_unit_block argument table */
struct COMMAND_ARG BITPOS_range_end_unit_block_Subargs[] = {
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_end_unit_block_unit_Subargs},
};

/* BITPOS range argument table */
struct COMMAND_ARG BITPOS_range_Subargs[] = {
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-unit-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_end_unit_block_Subargs},
};

/* BITPOS argument table */
struct COMMAND_ARG BITPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_Subargs},
};

/********** GETBIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETBIT history */
#define GETBIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETBIT tips */
#define GETBIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETBIT key specs */
keySpec GETBIT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETBIT argument table */
struct COMMAND_ARG GETBIT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SETBIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SETBIT history */
#define SETBIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SETBIT tips */
#define SETBIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SETBIT key specs */
keySpec SETBIT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SETBIT argument table */
struct COMMAND_ARG SETBIT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** ASKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ASKING history */
#define ASKING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ASKING tips */
#define ASKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ASKING key specs */
#define ASKING_Keyspecs NULL
#endif

/********** CLUSTER ADDSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER ADDSLOTS history */
#define CLUSTER_ADDSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER ADDSLOTS tips */
#define CLUSTER_ADDSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER ADDSLOTS key specs */
#define CLUSTER_ADDSLOTS_Keyspecs NULL
#endif

/* CLUSTER ADDSLOTS argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTS_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** CLUSTER ADDSLOTSRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER ADDSLOTSRANGE history */
#define CLUSTER_ADDSLOTSRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER ADDSLOTSRANGE tips */
#define CLUSTER_ADDSLOTSRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER ADDSLOTSRANGE key specs */
#define CLUSTER_ADDSLOTSRANGE_Keyspecs NULL
#endif

/* CLUSTER ADDSLOTSRANGE range argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTSRANGE_range_Subargs[] = {
{MAKE_ARG("start-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER ADDSLOTSRANGE argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTSRANGE_Args[] = {
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CLUSTER_ADDSLOTSRANGE_range_Subargs},
};

/********** CLUSTER BUMPEPOCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER BUMPEPOCH history */
#define CLUSTER_BUMPEPOCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER BUMPEPOCH tips */
const char *CLUSTER_BUMPEPOCH_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER BUMPEPOCH key specs */
#define CLUSTER_BUMPEPOCH_Keyspecs NULL
#endif

/********** CLUSTER COUNT_FAILURE_REPORTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS history */
#define CLUSTER_COUNT_FAILURE_REPORTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS tips */
const char *CLUSTER_COUNT_FAILURE_REPORTS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS key specs */
#define CLUSTER_COUNT_FAILURE_REPORTS_Keyspecs NULL
#endif

/* CLUSTER COUNT_FAILURE_REPORTS argument table */
struct COMMAND_ARG CLUSTER_COUNT_FAILURE_REPORTS_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER COUNTKEYSINSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER COUNTKEYSINSLOT history */
#define CLUSTER_COUNTKEYSINSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER COUNTKEYSINSLOT tips */
#define CLUSTER_COUNTKEYSINSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER COUNTKEYSINSLOT key specs */
#define CLUSTER_COUNTKEYSINSLOT_Keyspecs NULL
#endif

/* CLUSTER COUNTKEYSINSLOT argument table */
struct COMMAND_ARG CLUSTER_COUNTKEYSINSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER DELSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER DELSLOTS history */
#define CLUSTER_DELSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER DELSLOTS tips */
#define CLUSTER_DELSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER DELSLOTS key specs */
#define CLUSTER_DELSLOTS_Keyspecs NULL
#endif

/* CLUSTER DELSLOTS argument table */
struct COMMAND_ARG CLUSTER_DELSLOTS_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** CLUSTER DELSLOTSRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER DELSLOTSRANGE history */
#define CLUSTER_DELSLOTSRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER DELSLOTSRANGE tips */
#define CLUSTER_DELSLOTSRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER DELSLOTSRANGE key specs */
#define CLUSTER_DELSLOTSRANGE_Keyspecs NULL
#endif

/* CLUSTER DELSLOTSRANGE range argument table */
struct COMMAND_ARG CLUSTER_DELSLOTSRANGE_range_Subargs[] = {
{MAKE_ARG("start-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER DELSLOTSRANGE argument table */
struct COMMAND_ARG CLUSTER_DELSLOTSRANGE_Args[] = {
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CLUSTER_DELSLOTSRANGE_range_Subargs},
};

/********** CLUSTER FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FAILOVER history */
#define CLUSTER_FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FAILOVER tips */
#define CLUSTER_FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FAILOVER key specs */
#define CLUSTER_FAILOVER_Keyspecs NULL
#endif

/* CLUSTER FAILOVER options argument table */
struct COMMAND_ARG CLUSTER_FAILOVER_options_Subargs[] = {
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("takeover",ARG_TYPE_PURE_TOKEN,-1,"TAKEOVER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER FAILOVER argument table */
struct COMMAND_ARG CLUSTER_FAILOVER_Args[] = {
{MAKE_ARG("options",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLUSTER_FAILOVER_options_Subargs},
};

/********** CLUSTER FLUSHSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FLUSHSLOTS history */
#define CLUSTER_FLUSHSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FLUSHSLOTS tips */
#define CLUSTER_FLUSHSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FLUSHSLOTS key specs */
#define CLUSTER_FLUSHSLOTS_Keyspecs NULL
#endif

/********** CLUSTER FORGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FORGET history */
#define CLUSTER_FORGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FORGET tips */
#define CLUSTER_FORGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FORGET key specs */
#define CLUSTER_FORGET_Keyspecs NULL
#endif

/* CLUSTER FORGET argument table */
struct COMMAND_ARG CLUSTER_FORGET_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER GETKEYSINSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER GETKEYSINSLOT history */
#define CLUSTER_GETKEYSINSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER GETKEYSINSLOT tips */
const char *CLUSTER_GETKEYSINSLOT_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER GETKEYSINSLOT key specs */
#define CLUSTER_GETKEYSINSLOT_Keyspecs NULL
#endif

/* CLUSTER GETKEYSINSLOT argument table */
struct COMMAND_ARG CLUSTER_GETKEYSINSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER HELP history */
#define CLUSTER_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER HELP tips */
#define CLUSTER_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER HELP key specs */
#define CLUSTER_HELP_Keyspecs NULL
#endif

/********** CLUSTER INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER INFO history */
#define CLUSTER_INFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER INFO tips */
const char *CLUSTER_INFO_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER INFO key specs */
#define CLUSTER_INFO_Keyspecs NULL
#endif

/********** CLUSTER KEYSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER KEYSLOT history */
#define CLUSTER_KEYSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER KEYSLOT tips */
#define CLUSTER_KEYSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER KEYSLOT key specs */
#define CLUSTER_KEYSLOT_Keyspecs NULL
#endif

/* CLUSTER KEYSLOT argument table */
struct COMMAND_ARG CLUSTER_KEYSLOT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER LINKS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER LINKS history */
#define CLUSTER_LINKS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER LINKS tips */
const char *CLUSTER_LINKS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER LINKS key specs */
#define CLUSTER_LINKS_Keyspecs NULL
#endif

/********** CLUSTER MEET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MEET history */
commandHistory CLUSTER_MEET_History[] = {
{"4.0.0","Added the optional `cluster_bus_port` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MEET tips */
#define CLUSTER_MEET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MEET key specs */
#define CLUSTER_MEET_Keyspecs NULL
#endif

/* CLUSTER MEET argument table */
struct COMMAND_ARG CLUSTER_MEET_Args[] = {
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cluster-bus-port",ARG_TYPE_INTEGER,-1,NULL,NULL,"4.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** CLUSTER MYID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MYID history */
#define CLUSTER_MYID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MYID tips */
#define CLUSTER_MYID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MYID key specs */
#define CLUSTER_MYID_Keyspecs NULL
#endif

/********** CLUSTER MYSHARDID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MYSHARDID history */
#define CLUSTER_MYSHARDID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MYSHARDID tips */
const char *CLUSTER_MYSHARDID_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MYSHARDID key specs */
#define CLUSTER_MYSHARDID_Keyspecs NULL
#endif

/********** CLUSTER NODES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER NODES history */
#define CLUSTER_NODES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER NODES tips */
const char *CLUSTER_NODES_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER NODES key specs */
#define CLUSTER_NODES_Keyspecs NULL
#endif

/********** CLUSTER REPLICAS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER REPLICAS history */
#define CLUSTER_REPLICAS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER REPLICAS tips */
const char *CLUSTER_REPLICAS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER REPLICAS key specs */
#define CLUSTER_REPLICAS_Keyspecs NULL
#endif

/* CLUSTER REPLICAS argument table */
struct COMMAND_ARG CLUSTER_REPLICAS_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER REPLICATE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER REPLICATE history */
#define CLUSTER_REPLICATE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER REPLICATE tips */
#define CLUSTER_REPLICATE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER REPLICATE key specs */
#define CLUSTER_REPLICATE_Keyspecs NULL
#endif

/* CLUSTER REPLICATE argument table */
struct COMMAND_ARG CLUSTER_REPLICATE_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER RESET history */
#define CLUSTER_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER RESET tips */
#define CLUSTER_RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER RESET key specs */
#define CLUSTER_RESET_Keyspecs NULL
#endif

/* CLUSTER RESET reset_type argument table */
struct COMMAND_ARG CLUSTER_RESET_reset_type_Subargs[] = {
{MAKE_ARG("hard",ARG_TYPE_PURE_TOKEN,-1,"HARD",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("soft",ARG_TYPE_PURE_TOKEN,-1,"SOFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER RESET argument table */
struct COMMAND_ARG CLUSTER_RESET_Args[] = {
{MAKE_ARG("reset-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLUSTER_RESET_reset_type_Subargs},
};

/********** CLUSTER SAVECONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SAVECONFIG history */
#define CLUSTER_SAVECONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SAVECONFIG tips */
#define CLUSTER_SAVECONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SAVECONFIG key specs */
#define CLUSTER_SAVECONFIG_Keyspecs NULL
#endif

/********** CLUSTER SET_CONFIG_EPOCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SET_CONFIG_EPOCH history */
#define CLUSTER_SET_CONFIG_EPOCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SET_CONFIG_EPOCH tips */
#define CLUSTER_SET_CONFIG_EPOCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SET_CONFIG_EPOCH key specs */
#define CLUSTER_SET_CONFIG_EPOCH_Keyspecs NULL
#endif

/* CLUSTER SET_CONFIG_EPOCH argument table */
struct COMMAND_ARG CLUSTER_SET_CONFIG_EPOCH_Args[] = {
{MAKE_ARG("config-epoch",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER SETSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SETSLOT history */
#define CLUSTER_SETSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SETSLOT tips */
#define CLUSTER_SETSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SETSLOT key specs */
#define CLUSTER_SETSLOT_Keyspecs NULL
#endif

/* CLUSTER SETSLOT subcommand argument table */
struct COMMAND_ARG CLUSTER_SETSLOT_subcommand_Subargs[] = {
{MAKE_ARG("importing",ARG_TYPE_STRING,-1,"IMPORTING",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("migrating",ARG_TYPE_STRING,-1,"MIGRATING",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("node",ARG_TYPE_STRING,-1,"NODE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("stable",ARG_TYPE_PURE_TOKEN,-1,"STABLE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER SETSLOT argument table */
struct COMMAND_ARG CLUSTER_SETSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("subcommand",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=CLUSTER_SETSLOT_subcommand_Subargs},
};

/********** CLUSTER SHARDS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SHARDS history */
#define CLUSTER_SHARDS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SHARDS tips */
const char *CLUSTER_SHARDS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SHARDS key specs */
#define CLUSTER_SHARDS_Keyspecs NULL
#endif

/********** CLUSTER SLAVES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SLAVES history */
#define CLUSTER_SLAVES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SLAVES tips */
const char *CLUSTER_SLAVES_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SLAVES key specs */
#define CLUSTER_SLAVES_Keyspecs NULL
#endif

/* CLUSTER SLAVES argument table */
struct COMMAND_ARG CLUSTER_SLAVES_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLUSTER SLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SLOTS history */
commandHistory CLUSTER_SLOTS_History[] = {
{"4.0.0","Added node IDs."},
{"7.0.0","Added additional networking metadata field."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SLOTS tips */
const char *CLUSTER_SLOTS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SLOTS key specs */
#define CLUSTER_SLOTS_Keyspecs NULL
#endif

/* CLUSTER command table */
struct COMMAND_STRUCT CLUSTER_Subcommands[] = {
{MAKE_CMD("addslots","Assigns new hash slots to a node.","O(N) where N is the total number of hash slot arguments","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_ADDSLOTS_History,0,CLUSTER_ADDSLOTS_Tips,0,clusterCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_ADDSLOTS_Keyspecs,0,NULL,1),.args=CLUSTER_ADDSLOTS_Args},
{MAKE_CMD("addslotsrange","Assigns new hash slot ranges to a node.","O(N) where N is the total number of the slots between the start slot and end slot arguments.","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_ADDSLOTSRANGE_History,0,CLUSTER_ADDSLOTSRANGE_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_ADDSLOTSRANGE_Keyspecs,0,NULL,1),.args=CLUSTER_ADDSLOTSRANGE_Args},
{MAKE_CMD("bumpepoch","Advances the cluster config epoch.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_BUMPEPOCH_History,0,CLUSTER_BUMPEPOCH_Tips,1,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_BUMPEPOCH_Keyspecs,0,NULL,0)},
{MAKE_CMD("count-failure-reports","Returns the number of active failure reports active for a node.","O(N) where N is the number of failure reports","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_COUNT_FAILURE_REPORTS_History,0,CLUSTER_COUNT_FAILURE_REPORTS_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_COUNT_FAILURE_REPORTS_Keyspecs,0,NULL,1),.args=CLUSTER_COUNT_FAILURE_REPORTS_Args},
{MAKE_CMD("countkeysinslot","Returns the number of keys in a hash slot.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_COUNTKEYSINSLOT_History,0,CLUSTER_COUNTKEYSINSLOT_Tips,0,clusterCommand,3,CMD_STALE,0,CLUSTER_COUNTKEYSINSLOT_Keyspecs,0,NULL,1),.args=CLUSTER_COUNTKEYSINSLOT_Args},
{MAKE_CMD("delslots","Sets hash slots as unbound for a node.","O(N) where N is the total number of hash slot arguments","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_DELSLOTS_History,0,CLUSTER_DELSLOTS_Tips,0,clusterCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_DELSLOTS_Keyspecs,0,NULL,1),.args=CLUSTER_DELSLOTS_Args},
{MAKE_CMD("delslotsrange","Sets hash slot ranges as unbound for a node.","O(N) where N is the total number of the slots between the start slot and end slot arguments.","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_DELSLOTSRANGE_History,0,CLUSTER_DELSLOTSRANGE_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_DELSLOTSRANGE_Keyspecs,0,NULL,1),.args=CLUSTER_DELSLOTSRANGE_Args},
{MAKE_CMD("failover","Forces a replica to perform a manual failover of its master.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FAILOVER_History,0,CLUSTER_FAILOVER_Tips,0,clusterCommand,-2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FAILOVER_Keyspecs,0,NULL,1),.args=CLUSTER_FAILOVER_Args},
{MAKE_CMD("flushslots","Deletes all slots information from a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FLUSHSLOTS_History,0,CLUSTER_FLUSHSLOTS_Tips,0,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FLUSHSLOTS_Keyspecs,0,NULL,0)},
{MAKE_CMD("forget","Removes a node from the nodes table.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FORGET_History,0,CLUSTER_FORGET_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FORGET_Keyspecs,0,NULL,1),.args=CLUSTER_FORGET_Args},
{MAKE_CMD("getkeysinslot","Returns the key names in a hash slot.","O(N) where N is the number of requested keys","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_GETKEYSINSLOT_History,0,CLUSTER_GETKEYSINSLOT_Tips,1,clusterCommand,4,CMD_STALE,0,CLUSTER_GETKEYSINSLOT_Keyspecs,0,NULL,2),.args=CLUSTER_GETKEYSINSLOT_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_HELP_History,0,CLUSTER_HELP_Tips,0,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("info","Returns information about the state of a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_INFO_History,0,CLUSTER_INFO_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_INFO_Keyspecs,0,NULL,0)},
{MAKE_CMD("keyslot","Returns the hash slot for a key.","O(N) where N is the number of bytes in the key","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_KEYSLOT_History,0,CLUSTER_KEYSLOT_Tips,0,clusterCommand,3,CMD_STALE,0,CLUSTER_KEYSLOT_Keyspecs,0,NULL,1),.args=CLUSTER_KEYSLOT_Args},
{MAKE_CMD("links","Returns a list of all TCP links to and from peer nodes.","O(N) where N is the total number of Cluster nodes","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_LINKS_History,0,CLUSTER_LINKS_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_LINKS_Keyspecs,0,NULL,0)},
{MAKE_CMD("meet","Forces a node to handshake with another node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MEET_History,1,CLUSTER_MEET_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_MEET_Keyspecs,0,NULL,3),.args=CLUSTER_MEET_Args},
{MAKE_CMD("myid","Returns the ID of a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MYID_History,0,CLUSTER_MYID_Tips,0,clusterCommand,2,CMD_STALE,0,CLUSTER_MYID_Keyspecs,0,NULL,0)},
{MAKE_CMD("myshardid","Returns the shard ID of a node.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MYSHARDID_History,0,CLUSTER_MYSHARDID_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_MYSHARDID_Keyspecs,0,NULL,0)},
{MAKE_CMD("nodes","Returns the cluster configuration for a node.","O(N) where N is the total number of Cluster nodes","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_NODES_History,0,CLUSTER_NODES_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_NODES_Keyspecs,0,NULL,0)},
{MAKE_CMD("replicas","Lists the replica nodes of a master node.","O(N) where N is the number of replicas.","5.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_REPLICAS_History,0,CLUSTER_REPLICAS_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_REPLICAS_Keyspecs,0,NULL,1),.args=CLUSTER_REPLICAS_Args},
{MAKE_CMD("replicate","Configure a node as replica of a master node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_REPLICATE_History,0,CLUSTER_REPLICATE_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_REPLICATE_Keyspecs,0,NULL,1),.args=CLUSTER_REPLICATE_Args},
{MAKE_CMD("reset","Resets a node.","O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_RESET_History,0,CLUSTER_RESET_Tips,0,clusterCommand,-2,CMD_ADMIN|CMD_STALE|CMD_NOSCRIPT,0,CLUSTER_RESET_Keyspecs,0,NULL,1),.args=CLUSTER_RESET_Args},
{MAKE_CMD("saveconfig","Forces a node to save the cluster configuration to disk.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SAVECONFIG_History,0,CLUSTER_SAVECONFIG_Tips,0,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SAVECONFIG_Keyspecs,0,NULL,0)},
{MAKE_CMD("set-config-epoch","Sets the configuration epoch for a new node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SET_CONFIG_EPOCH_History,0,CLUSTER_SET_CONFIG_EPOCH_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SET_CONFIG_EPOCH_Keyspecs,0,NULL,1),.args=CLUSTER_SET_CONFIG_EPOCH_Args},
{MAKE_CMD("setslot","Binds a hash slot to a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SETSLOT_History,0,CLUSTER_SETSLOT_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SETSLOT_Keyspecs,0,NULL,2),.args=CLUSTER_SETSLOT_Args},
{MAKE_CMD("shards","Returns the mapping of cluster slots to shards.","O(N) where N is the total number of cluster nodes","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SHARDS_History,0,CLUSTER_SHARDS_Tips,1,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_SHARDS_Keyspecs,0,NULL,0)},
{MAKE_CMD("slaves","Lists the replica nodes of a master node.","O(N) where N is the number of replicas.","3.0.0",CMD_DOC_DEPRECATED,"`CLUSTER REPLICAS`","5.0.0","cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SLAVES_History,0,CLUSTER_SLAVES_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_SLAVES_Keyspecs,0,NULL,1),.args=CLUSTER_SLAVES_Args},
{MAKE_CMD("slots","Returns the mapping of cluster slots to nodes.","O(N) where N is the total number of Cluster nodes","3.0.0",CMD_DOC_DEPRECATED,"`CLUSTER SHARDS`","7.0.0","cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SLOTS_History,2,CLUSTER_SLOTS_Tips,1,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_SLOTS_Keyspecs,0,NULL,0)},
{0}
};

/********** CLUSTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER history */
#define CLUSTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER tips */
#define CLUSTER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER key specs */
#define CLUSTER_Keyspecs NULL
#endif

/********** READONLY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* READONLY history */
#define READONLY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* READONLY tips */
#define READONLY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* READONLY key specs */
#define READONLY_Keyspecs NULL
#endif

/********** READWRITE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* READWRITE history */
#define READWRITE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* READWRITE tips */
#define READWRITE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* READWRITE key specs */
#define READWRITE_Keyspecs NULL
#endif

/********** AUTH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* AUTH history */
commandHistory AUTH_History[] = {
{"6.0.0","Added ACL style (username and password)."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* AUTH tips */
#define AUTH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* AUTH key specs */
#define AUTH_Keyspecs NULL
#endif

/* AUTH argument table */
struct COMMAND_ARG AUTH_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,"6.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLIENT CACHING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT CACHING history */
#define CLIENT_CACHING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT CACHING tips */
#define CLIENT_CACHING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT CACHING key specs */
#define CLIENT_CACHING_Keyspecs NULL
#endif

/* CLIENT CACHING mode argument table */
struct COMMAND_ARG CLIENT_CACHING_mode_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT CACHING argument table */
struct COMMAND_ARG CLIENT_CACHING_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_CACHING_mode_Subargs},
};

/********** CLIENT GETNAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT GETNAME history */
#define CLIENT_GETNAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT GETNAME tips */
#define CLIENT_GETNAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT GETNAME key specs */
#define CLIENT_GETNAME_Keyspecs NULL
#endif

/********** CLIENT GETREDIR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT GETREDIR history */
#define CLIENT_GETREDIR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT GETREDIR tips */
#define CLIENT_GETREDIR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT GETREDIR key specs */
#define CLIENT_GETREDIR_Keyspecs NULL
#endif

/********** CLIENT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT HELP history */
#define CLIENT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT HELP tips */
#define CLIENT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT HELP key specs */
#define CLIENT_HELP_Keyspecs NULL
#endif

/********** CLIENT ID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT ID history */
#define CLIENT_ID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT ID tips */
#define CLIENT_ID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT ID key specs */
#define CLIENT_ID_Keyspecs NULL
#endif

/********** CLIENT INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT INFO history */
#define CLIENT_INFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT INFO tips */
const char *CLIENT_INFO_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT INFO key specs */
#define CLIENT_INFO_Keyspecs NULL
#endif

/********** CLIENT KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT KILL history */
commandHistory CLIENT_KILL_History[] = {
{"2.8.12","Added new filter format."},
{"2.8.12","`ID` option."},
{"3.2.0","Added `master` type in for `TYPE` option."},
{"5.0.0","Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility."},
{"6.2.0","`LADDR` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT KILL tips */
#define CLIENT_KILL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT KILL key specs */
#define CLIENT_KILL_Keyspecs NULL
#endif

/* CLIENT KILL filter new_format client_type argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_client_type_Subargs[] = {
{MAKE_ARG("normal",ARG_TYPE_PURE_TOKEN,-1,"NORMAL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("master",ARG_TYPE_PURE_TOKEN,-1,"MASTER",NULL,"3.2.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("slave",ARG_TYPE_PURE_TOKEN,-1,"SLAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replica",ARG_TYPE_PURE_TOKEN,-1,"REPLICA",NULL,"5.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pubsub",ARG_TYPE_PURE_TOKEN,-1,"PUBSUB",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT KILL filter new_format skipme argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_skipme_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT KILL filter new_format argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_Subargs[] = {
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"ID",NULL,"2.8.12",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("client-type",ARG_TYPE_ONEOF,-1,"TYPE",NULL,"2.8.12",CMD_ARG_OPTIONAL,5,NULL),.subargs=CLIENT_KILL_filter_new_format_client_type_Subargs},
{MAKE_ARG("username",ARG_TYPE_STRING,-1,"USER",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("addr",ARG_TYPE_STRING,-1,"ADDR",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="ip:port"},
{MAKE_ARG("laddr",ARG_TYPE_STRING,-1,"LADDR",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL),.display_text="ip:port"},
{MAKE_ARG("skipme",ARG_TYPE_ONEOF,-1,"SKIPME",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_KILL_filter_new_format_skipme_Subargs},
};

/* CLIENT KILL filter argument table */
struct COMMAND_ARG CLIENT_KILL_filter_Subargs[] = {
{MAKE_ARG("old-format",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,"2.8.12"),.display_text="ip:port"},
{MAKE_ARG("new-format",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,6,NULL),.subargs=CLIENT_KILL_filter_new_format_Subargs},
};

/* CLIENT KILL argument table */
struct COMMAND_ARG CLIENT_KILL_Args[] = {
{MAKE_ARG("filter",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_KILL_filter_Subargs},
};

/********** CLIENT LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT LIST history */
commandHistory CLIENT_LIST_History[] = {
{"2.8.12","Added unique client `id` field."},
{"5.0.0","Added optional `TYPE` filter."},
{"6.0.0","Added `user` field."},
{"6.2.0","Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter."},
{"7.0.0","Added `resp`, `multi-mem`, `rbs` and `rbp` fields."},
{"7.0.3","Added `ssub` field."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT LIST tips */
const char *CLIENT_LIST_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT LIST key specs */
#define CLIENT_LIST_Keyspecs NULL
#endif

/* CLIENT LIST client_type argument table */
struct COMMAND_ARG CLIENT_LIST_client_type_Subargs[] = {
{MAKE_ARG("normal",ARG_TYPE_PURE_TOKEN,-1,"NORMAL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("master",ARG_TYPE_PURE_TOKEN,-1,"MASTER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replica",ARG_TYPE_PURE_TOKEN,-1,"REPLICA",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pubsub",ARG_TYPE_PURE_TOKEN,-1,"PUBSUB",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT LIST argument table */
struct COMMAND_ARG CLIENT_LIST_Args[] = {
{MAKE_ARG("client-type",ARG_TYPE_ONEOF,-1,"TYPE",NULL,"5.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=CLIENT_LIST_client_type_Subargs},
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"ID",NULL,"6.2.0",CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** CLIENT NO_EVICT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT NO_EVICT history */
#define CLIENT_NO_EVICT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT NO_EVICT tips */
#define CLIENT_NO_EVICT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT NO_EVICT key specs */
#define CLIENT_NO_EVICT_Keyspecs NULL
#endif

/* CLIENT NO_EVICT enabled argument table */
struct COMMAND_ARG CLIENT_NO_EVICT_enabled_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT NO_EVICT argument table */
struct COMMAND_ARG CLIENT_NO_EVICT_Args[] = {
{MAKE_ARG("enabled",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_NO_EVICT_enabled_Subargs},
};

/********** CLIENT NO_TOUCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT NO_TOUCH history */
#define CLIENT_NO_TOUCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT NO_TOUCH tips */
#define CLIENT_NO_TOUCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT NO_TOUCH key specs */
#define CLIENT_NO_TOUCH_Keyspecs NULL
#endif

/* CLIENT NO_TOUCH enabled argument table */
struct COMMAND_ARG CLIENT_NO_TOUCH_enabled_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT NO_TOUCH argument table */
struct COMMAND_ARG CLIENT_NO_TOUCH_Args[] = {
{MAKE_ARG("enabled",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_NO_TOUCH_enabled_Subargs},
};

/********** CLIENT PAUSE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT PAUSE history */
commandHistory CLIENT_PAUSE_History[] = {
{"6.2.0","`CLIENT PAUSE WRITE` mode added along with the `mode` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT PAUSE tips */
#define CLIENT_PAUSE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT PAUSE key specs */
#define CLIENT_PAUSE_Keyspecs NULL
#endif

/* CLIENT PAUSE mode argument table */
struct COMMAND_ARG CLIENT_PAUSE_mode_Subargs[] = {
{MAKE_ARG("write",ARG_TYPE_PURE_TOKEN,-1,"WRITE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("all",ARG_TYPE_PURE_TOKEN,-1,"ALL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT PAUSE argument table */
struct COMMAND_ARG CLIENT_PAUSE_Args[] = {
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_PAUSE_mode_Subargs},
};

/********** CLIENT REPLY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT REPLY history */
#define CLIENT_REPLY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT REPLY tips */
#define CLIENT_REPLY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT REPLY key specs */
#define CLIENT_REPLY_Keyspecs NULL
#endif

/* CLIENT REPLY action argument table */
struct COMMAND_ARG CLIENT_REPLY_action_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("skip",ARG_TYPE_PURE_TOKEN,-1,"SKIP",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT REPLY argument table */
struct COMMAND_ARG CLIENT_REPLY_Args[] = {
{MAKE_ARG("action",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=CLIENT_REPLY_action_Subargs},
};

/********** CLIENT SETINFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT SETINFO history */
#define CLIENT_SETINFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT SETINFO tips */
const char *CLIENT_SETINFO_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT SETINFO key specs */
#define CLIENT_SETINFO_Keyspecs NULL
#endif

/* CLIENT SETINFO attr argument table */
struct COMMAND_ARG CLIENT_SETINFO_attr_Subargs[] = {
{MAKE_ARG("libname",ARG_TYPE_STRING,-1,"LIB-NAME",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("libver",ARG_TYPE_STRING,-1,"LIB-VER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT SETINFO argument table */
struct COMMAND_ARG CLIENT_SETINFO_Args[] = {
{MAKE_ARG("attr",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_SETINFO_attr_Subargs},
};

/********** CLIENT SETNAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT SETNAME history */
#define CLIENT_SETNAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT SETNAME tips */
const char *CLIENT_SETNAME_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT SETNAME key specs */
#define CLIENT_SETNAME_Keyspecs NULL
#endif

/* CLIENT SETNAME argument table */
struct COMMAND_ARG CLIENT_SETNAME_Args[] = {
{MAKE_ARG("connection-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** CLIENT TRACKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT TRACKING history */
#define CLIENT_TRACKING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT TRACKING tips */
#define CLIENT_TRACKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT TRACKING key specs */
#define CLIENT_TRACKING_Keyspecs NULL
#endif

/* CLIENT TRACKING status argument table */
struct COMMAND_ARG CLIENT_TRACKING_status_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT TRACKING argument table */
struct COMMAND_ARG CLIENT_TRACKING_Args[] = {
{MAKE_ARG("status",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_TRACKING_status_Subargs},
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"REDIRECT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("prefix",ARG_TYPE_STRING,-1,"PREFIX",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL)},
{MAKE_ARG("bcast",ARG_TYPE_PURE_TOKEN,-1,"BCAST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("optin",ARG_TYPE_PURE_TOKEN,-1,"OPTIN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("optout",ARG_TYPE_PURE_TOKEN,-1,"OPTOUT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("noloop",ARG_TYPE_PURE_TOKEN,-1,"NOLOOP",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** CLIENT TRACKINGINFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT TRACKINGINFO history */
#define CLIENT_TRACKINGINFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT TRACKINGINFO tips */
#define CLIENT_TRACKINGINFO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT TRACKINGINFO key specs */
#define CLIENT_TRACKINGINFO_Keyspecs NULL
#endif

/********** CLIENT UNBLOCK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT UNBLOCK history */
#define CLIENT_UNBLOCK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT UNBLOCK tips */
#define CLIENT_UNBLOCK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT UNBLOCK key specs */
#define CLIENT_UNBLOCK_Keyspecs NULL
#endif

/* CLIENT UNBLOCK unblock_type argument table */
struct COMMAND_ARG CLIENT_UNBLOCK_unblock_type_Subargs[] = {
{MAKE_ARG("timeout",ARG_TYPE_PURE_TOKEN,-1,"TIMEOUT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("error",ARG_TYPE_PURE_TOKEN,-1,"ERROR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT UNBLOCK argument table */
struct COMMAND_ARG CLIENT_UNBLOCK_Args[] = {
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unblock-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_UNBLOCK_unblock_type_Subargs},
};

/********** CLIENT UNPAUSE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT UNPAUSE history */
#define CLIENT_UNPAUSE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT UNPAUSE tips */
#define CLIENT_UNPAUSE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT UNPAUSE key specs */
#define CLIENT_UNPAUSE_Keyspecs NULL
#endif

/* CLIENT command table */
struct COMMAND_STRUCT CLIENT_Subcommands[] = {
{MAKE_CMD("caching","Instructs the server whether to track the keys in the next request.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_CACHING_History,0,CLIENT_CACHING_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_CACHING_Keyspecs,0,NULL,1),.args=CLIENT_CACHING_Args},
{MAKE_CMD("getname","Returns the name of the connection.","O(1)","2.6.9",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_GETNAME_History,0,CLIENT_GETNAME_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_GETNAME_Keyspecs,0,NULL,0)},
{MAKE_CMD("getredir","Returns the client ID to which the connection's tracking notifications are redirected.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_GETREDIR_History,0,CLIENT_GETREDIR_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_GETREDIR_Keyspecs,0,NULL,0)},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_HELP_History,0,CLIENT_HELP_Tips,0,clientCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("id","Returns the unique client ID of the connection.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_ID_History,0,CLIENT_ID_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_ID_Keyspecs,0,NULL,0)},
{MAKE_CMD("info","Returns information about the connection.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_INFO_History,0,CLIENT_INFO_Tips,1,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_INFO_Keyspecs,0,NULL,0)},
{MAKE_CMD("kill","Terminates open connections.","O(N) where N is the number of client connections","2.4.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_KILL_History,5,CLIENT_KILL_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_KILL_Keyspecs,0,NULL,1),.args=CLIENT_KILL_Args},
{MAKE_CMD("list","Lists open connections.","O(N) where N is the number of client connections","2.4.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_LIST_History,6,CLIENT_LIST_Tips,1,clientCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_LIST_Keyspecs,0,NULL,2),.args=CLIENT_LIST_Args},
{MAKE_CMD("no-evict","Sets the client eviction mode of the connection.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_NO_EVICT_History,0,CLIENT_NO_EVICT_Tips,0,clientCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_NO_EVICT_Keyspecs,0,NULL,1),.args=CLIENT_NO_EVICT_Args},
{MAKE_CMD("no-touch","Controls whether commands sent by the client affect the LRU/LFU of accessed keys.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_NO_TOUCH_History,0,CLIENT_NO_TOUCH_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,ACL_CATEGORY_CONNECTION,CLIENT_NO_TOUCH_Keyspecs,0,NULL,1),.args=CLIENT_NO_TOUCH_Args},
{MAKE_CMD("pause","Suspends commands processing.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_PAUSE_History,1,CLIENT_PAUSE_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_PAUSE_Keyspecs,0,NULL,2),.args=CLIENT_PAUSE_Args},
{MAKE_CMD("reply","Instructs the server whether to reply to commands.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_REPLY_History,0,CLIENT_REPLY_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_REPLY_Keyspecs,0,NULL,1),.args=CLIENT_REPLY_Args},
{MAKE_CMD("setinfo","Sets information specific to the client or connection.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_SETINFO_History,0,CLIENT_SETINFO_Tips,2,clientSetinfoCommand,4,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_SETINFO_Keyspecs,0,NULL,1),.args=CLIENT_SETINFO_Args},
{MAKE_CMD("setname","Sets the connection name.","O(1)","2.6.9",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_SETNAME_History,0,CLIENT_SETNAME_Tips,2,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_SETNAME_Keyspecs,0,NULL,1),.args=CLIENT_SETNAME_Args},
{MAKE_CMD("tracking","Controls server-assisted client-side caching for the connection.","O(1). Some options may introduce additional complexity.","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_TRACKING_History,0,CLIENT_TRACKING_Tips,0,clientCommand,-3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_TRACKING_Keyspecs,0,NULL,7),.args=CLIENT_TRACKING_Args},
{MAKE_CMD("trackinginfo","Returns information about server-assisted client-side caching for the connection.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_TRACKINGINFO_History,0,CLIENT_TRACKINGINFO_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_TRACKINGINFO_Keyspecs,0,NULL,0)},
{MAKE_CMD("unblock","Unblocks a client blocked by a blocking command from a different connection.","O(log N) where N is the number of client connections","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_UNBLOCK_History,0,CLIENT_UNBLOCK_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_UNBLOCK_Keyspecs,0,NULL,2),.args=CLIENT_UNBLOCK_Args},
{MAKE_CMD("unpause","Resumes processing commands from paused clients.","O(N) Where N is the number of paused clients","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_UNPAUSE_History,0,CLIENT_UNPAUSE_Tips,0,clientCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_UNPAUSE_Keyspecs,0,NULL,0)},
{0}
};

/********** CLIENT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT history */
#define CLIENT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT tips */
#define CLIENT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT key specs */
#define CLIENT_Keyspecs NULL
#endif

/********** ECHO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ECHO history */
#define ECHO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ECHO tips */
#define ECHO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ECHO key specs */
#define ECHO_Keyspecs NULL
#endif

/* ECHO argument table */
struct COMMAND_ARG ECHO_Args[] = {
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HELLO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HELLO history */
commandHistory HELLO_History[] = {
{"6.2.0","`protover` made optional; when called without arguments the command reports the current connection's context."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HELLO tips */
#define HELLO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HELLO key specs */
#define HELLO_Keyspecs NULL
#endif

/* HELLO arguments auth argument table */
struct COMMAND_ARG HELLO_arguments_auth_Subargs[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HELLO arguments argument table */
struct COMMAND_ARG HELLO_arguments_Subargs[] = {
{MAKE_ARG("protover",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("auth",ARG_TYPE_BLOCK,-1,"AUTH",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=HELLO_arguments_auth_Subargs},
{MAKE_ARG("clientname",ARG_TYPE_STRING,-1,"SETNAME",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* HELLO argument table */
struct COMMAND_ARG HELLO_Args[] = {
{MAKE_ARG("arguments",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=HELLO_arguments_Subargs},
};

/********** PING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PING history */
#define PING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PING tips */
const char *PING_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PING key specs */
#define PING_Keyspecs NULL
#endif

/* PING argument table */
struct COMMAND_ARG PING_Args[] = {
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** QUIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* QUIT history */
#define QUIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* QUIT tips */
#define QUIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* QUIT key specs */
#define QUIT_Keyspecs NULL
#endif

/********** RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESET history */
#define RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESET tips */
#define RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESET key specs */
#define RESET_Keyspecs NULL
#endif

/********** SELECT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SELECT history */
#define SELECT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SELECT tips */
#define SELECT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SELECT key specs */
#define SELECT_Keyspecs NULL
#endif

/* SELECT argument table */
struct COMMAND_ARG SELECT_Args[] = {
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** COPY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COPY history */
#define COPY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COPY tips */
#define COPY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COPY key specs */
keySpec COPY_Keyspecs[2] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* COPY argument table */
struct COMMAND_ARG COPY_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination-db",ARG_TYPE_INTEGER,-1,"DB",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** DEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DEL history */
#define DEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DEL tips */
const char *DEL_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DEL key specs */
keySpec DEL_Keyspecs[1] = {
{NULL,CMD_KEY_RM|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* DEL argument table */
struct COMMAND_ARG DEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** DUMP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DUMP history */
#define DUMP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DUMP tips */
const char *DUMP_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DUMP key specs */
keySpec DUMP_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* DUMP argument table */
struct COMMAND_ARG DUMP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** EXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXISTS history */
commandHistory EXISTS_History[] = {
{"3.0.3","Accepts multiple `key` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXISTS tips */
const char *EXISTS_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXISTS key specs */
keySpec EXISTS_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* EXISTS argument table */
struct COMMAND_ARG EXISTS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIRE history */
commandHistory EXPIRE_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIRE tips */
#define EXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIRE key specs */
keySpec EXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIRE condition argument table */
struct COMMAND_ARG EXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* EXPIRE argument table */
struct COMMAND_ARG EXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=EXPIRE_condition_Subargs},
};

/********** EXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIREAT history */
commandHistory EXPIREAT_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIREAT tips */
#define EXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIREAT key specs */
keySpec EXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIREAT condition argument table */
struct COMMAND_ARG EXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* EXPIREAT argument table */
struct COMMAND_ARG EXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-seconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=EXPIREAT_condition_Subargs},
};

/********** EXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIRETIME history */
#define EXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIRETIME tips */
#define EXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIRETIME key specs */
keySpec EXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIRETIME argument table */
struct COMMAND_ARG EXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** KEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* KEYS history */
#define KEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* KEYS tips */
const char *KEYS_Tips[] = {
"request_policy:all_shards",
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* KEYS key specs */
#define KEYS_Keyspecs NULL
#endif

/* KEYS argument table */
struct COMMAND_ARG KEYS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** MIGRATE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MIGRATE history */
commandHistory MIGRATE_History[] = {
{"3.0.0","Added the `COPY` and `REPLACE` options."},
{"3.0.6","Added the `KEYS` option."},
{"4.0.7","Added the `AUTH` option."},
{"6.0.0","Added the `AUTH2` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MIGRATE tips */
const char *MIGRATE_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MIGRATE key specs */
keySpec MIGRATE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={3},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE|CMD_KEY_INCOMPLETE,KSPEC_BS_KEYWORD,.bs.keyword={"KEYS",-2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* MIGRATE key_selector argument table */
struct COMMAND_ARG MIGRATE_key_selector_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("empty-string",ARG_TYPE_PURE_TOKEN,-1,"""",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MIGRATE authentication auth2 argument table */
struct COMMAND_ARG MIGRATE_authentication_auth2_Subargs[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MIGRATE authentication argument table */
struct COMMAND_ARG MIGRATE_authentication_Subargs[] = {
{MAKE_ARG("auth",ARG_TYPE_STRING,-1,"AUTH",NULL,"4.0.7",CMD_ARG_NONE,0,NULL),.display_text="password"},
{MAKE_ARG("auth2",ARG_TYPE_BLOCK,-1,"AUTH2",NULL,"6.0.0",CMD_ARG_NONE,2,NULL),.subargs=MIGRATE_authentication_auth2_Subargs},
};

/* MIGRATE argument table */
struct COMMAND_ARG MIGRATE_Args[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=MIGRATE_key_selector_Subargs},
{MAKE_ARG("destination-db",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("copy",ARG_TYPE_PURE_TOKEN,-1,"COPY",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("authentication",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=MIGRATE_authentication_Subargs},
{MAKE_ARG("keys",ARG_TYPE_KEY,1,"KEYS",NULL,"3.0.6",CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL),.display_text="key"},
};

/********** MOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MOVE history */
#define MOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MOVE tips */
#define MOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MOVE key specs */
keySpec MOVE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* MOVE argument table */
struct COMMAND_ARG MOVE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("db",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** OBJECT ENCODING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT ENCODING history */
#define OBJECT_ENCODING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT ENCODING tips */
const char *OBJECT_ENCODING_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT ENCODING key specs */
keySpec OBJECT_ENCODING_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT ENCODING argument table */
struct COMMAND_ARG OBJECT_ENCODING_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** OBJECT FREQ ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT FREQ history */
#define OBJECT_FREQ_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT FREQ tips */
const char *OBJECT_FREQ_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT FREQ key specs */
keySpec OBJECT_FREQ_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT FREQ argument table */
struct COMMAND_ARG OBJECT_FREQ_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** OBJECT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT HELP history */
#define OBJECT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT HELP tips */
#define OBJECT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT HELP key specs */
#define OBJECT_HELP_Keyspecs NULL
#endif

/********** OBJECT IDLETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT IDLETIME history */
#define OBJECT_IDLETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT IDLETIME tips */
const char *OBJECT_IDLETIME_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT IDLETIME key specs */
keySpec OBJECT_IDLETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT IDLETIME argument table */
struct COMMAND_ARG OBJECT_IDLETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** OBJECT REFCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT REFCOUNT history */
#define OBJECT_REFCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT REFCOUNT tips */
const char *OBJECT_REFCOUNT_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT REFCOUNT key specs */
keySpec OBJECT_REFCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT REFCOUNT argument table */
struct COMMAND_ARG OBJECT_REFCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* OBJECT command table */
struct COMMAND_STRUCT OBJECT_Subcommands[] = {
{MAKE_CMD("encoding","Returns the internal encoding of a Redis object.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_ENCODING_History,0,OBJECT_ENCODING_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_ENCODING_Keyspecs,1,NULL,1),.args=OBJECT_ENCODING_Args},
{MAKE_CMD("freq","Returns the logarithmic access frequency counter of a Redis object.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_FREQ_History,0,OBJECT_FREQ_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_FREQ_Keyspecs,1,NULL,1),.args=OBJECT_FREQ_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_HELP_History,0,OBJECT_HELP_Tips,0,objectCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_KEYSPACE,OBJECT_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("idletime","Returns the time since the last access to a Redis object.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_IDLETIME_History,0,OBJECT_IDLETIME_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_IDLETIME_Keyspecs,1,NULL,1),.args=OBJECT_IDLETIME_Args},
{MAKE_CMD("refcount","Returns the reference count of a value of a key.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_REFCOUNT_History,0,OBJECT_REFCOUNT_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_REFCOUNT_Keyspecs,1,NULL,1),.args=OBJECT_REFCOUNT_Args},
{0}
};

/********** OBJECT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT history */
#define OBJECT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT tips */
#define OBJECT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT key specs */
#define OBJECT_Keyspecs NULL
#endif

/********** PERSIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PERSIST history */
#define PERSIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PERSIST tips */
#define PERSIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PERSIST key specs */
keySpec PERSIST_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PERSIST argument table */
struct COMMAND_ARG PERSIST_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PEXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIRE history */
commandHistory PEXPIRE_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIRE tips */
#define PEXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIRE key specs */
keySpec PEXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIRE condition argument table */
struct COMMAND_ARG PEXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PEXPIRE argument table */
struct COMMAND_ARG PEXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=PEXPIRE_condition_Subargs},
};

/********** PEXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIREAT history */
commandHistory PEXPIREAT_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIREAT tips */
#define PEXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIREAT key specs */
keySpec PEXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIREAT condition argument table */
struct COMMAND_ARG PEXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PEXPIREAT argument table */
struct COMMAND_ARG PEXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=PEXPIREAT_condition_Subargs},
};

/********** PEXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIRETIME history */
#define PEXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIRETIME tips */
#define PEXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIRETIME key specs */
keySpec PEXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIRETIME argument table */
struct COMMAND_ARG PEXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PTTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PTTL history */
commandHistory PTTL_History[] = {
{"2.8.0","Added the -2 reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PTTL tips */
const char *PTTL_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PTTL key specs */
keySpec PTTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PTTL argument table */
struct COMMAND_ARG PTTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** RANDOMKEY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RANDOMKEY history */
#define RANDOMKEY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RANDOMKEY tips */
const char *RANDOMKEY_Tips[] = {
"request_policy:all_shards",
"response_policy:special",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RANDOMKEY key specs */
#define RANDOMKEY_Keyspecs NULL
#endif

/********** RENAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RENAME history */
#define RENAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RENAME tips */
#define RENAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RENAME key specs */
keySpec RENAME_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RENAME argument table */
struct COMMAND_ARG RENAME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("newkey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** RENAMENX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RENAMENX history */
commandHistory RENAMENX_History[] = {
{"3.2.0","The command no longer returns an error when source and destination names are the same."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RENAMENX tips */
#define RENAMENX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RENAMENX key specs */
keySpec RENAMENX_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RENAMENX argument table */
struct COMMAND_ARG RENAMENX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("newkey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** RESTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESTORE history */
commandHistory RESTORE_History[] = {
{"3.0.0","Added the `REPLACE` modifier."},
{"5.0.0","Added the `ABSTTL` modifier."},
{"5.0.0","Added the `IDLETIME` and `FREQ` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESTORE tips */
#define RESTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESTORE key specs */
keySpec RESTORE_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RESTORE argument table */
struct COMMAND_ARG RESTORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ttl",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("absttl",ARG_TYPE_PURE_TOKEN,-1,"ABSTTL",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"IDLETIME",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("frequency",ARG_TYPE_INTEGER,-1,"FREQ",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCAN history */
commandHistory SCAN_History[] = {
{"6.0.0","Added the `TYPE` subcommand."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCAN tips */
const char *SCAN_Tips[] = {
"nondeterministic_output",
"request_policy:special",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCAN key specs */
#define SCAN_Keyspecs NULL
#endif

/* SCAN argument table */
struct COMMAND_ARG SCAN_Args[] = {
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("type",ARG_TYPE_STRING,-1,"TYPE",NULL,"6.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SORT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SORT history */
#define SORT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SORT tips */
#define SORT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SORT key specs */
keySpec SORT_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}},{"For the optional STORE keyword. It is marked 'unknown' because the keyword can appear anywhere in the argument array",CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}}
};
#endif

/* SORT limit argument table */
struct COMMAND_ARG SORT_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT order argument table */
struct COMMAND_ARG SORT_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT argument table */
struct COMMAND_ARG SORT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("by-pattern",ARG_TYPE_PATTERN,1,"BY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="pattern"},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_limit_Subargs},
{MAKE_ARG("get-pattern",ARG_TYPE_PATTERN,1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL),.display_text="pattern"},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_order_Subargs},
{MAKE_ARG("sorting",ARG_TYPE_PURE_TOKEN,-1,"ALPHA",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,2,"STORE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SORT_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SORT_RO history */
#define SORT_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SORT_RO tips */
#define SORT_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SORT_RO key specs */
keySpec SORT_RO_Keyspecs[2] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}}
};
#endif

/* SORT_RO limit argument table */
struct COMMAND_ARG SORT_RO_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT_RO order argument table */
struct COMMAND_ARG SORT_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT_RO argument table */
struct COMMAND_ARG SORT_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("by-pattern",ARG_TYPE_PATTERN,1,"BY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="pattern"},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_RO_limit_Subargs},
{MAKE_ARG("get-pattern",ARG_TYPE_PATTERN,1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL),.display_text="pattern"},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_RO_order_Subargs},
{MAKE_ARG("sorting",ARG_TYPE_PURE_TOKEN,-1,"ALPHA",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** TOUCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TOUCH history */
#define TOUCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TOUCH tips */
const char *TOUCH_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TOUCH key specs */
keySpec TOUCH_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* TOUCH argument table */
struct COMMAND_ARG TOUCH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** TTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TTL history */
commandHistory TTL_History[] = {
{"2.8.0","Added the -2 reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TTL tips */
const char *TTL_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TTL key specs */
keySpec TTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* TTL argument table */
struct COMMAND_ARG TTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** TYPE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TYPE history */
#define TYPE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TYPE tips */
#define TYPE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TYPE key specs */
keySpec TYPE_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* TYPE argument table */
struct COMMAND_ARG TYPE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** UNLINK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* UNLINK history */
#define UNLINK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* UNLINK tips */
const char *UNLINK_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* UNLINK key specs */
keySpec UNLINK_Keyspecs[1] = {
{NULL,CMD_KEY_RM|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* UNLINK argument table */
struct COMMAND_ARG UNLINK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** WAIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* WAIT history */
#define WAIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* WAIT tips */
const char *WAIT_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_min",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* WAIT key specs */
#define WAIT_Keyspecs NULL
#endif

/* WAIT argument table */
struct COMMAND_ARG WAIT_Args[] = {
{MAKE_ARG("numreplicas",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** WAITAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* WAITAOF history */
#define WAITAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* WAITAOF tips */
const char *WAITAOF_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_min",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* WAITAOF key specs */
#define WAITAOF_Keyspecs NULL
#endif

/* WAITAOF argument table */
struct COMMAND_ARG WAITAOF_Args[] = {
{MAKE_ARG("numlocal",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numreplicas",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** GEOADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOADD history */
commandHistory GEOADD_History[] = {
{"6.2.0","Added the `CH`, `NX` and `XX` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOADD tips */
#define GEOADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOADD key specs */
keySpec GEOADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOADD condition argument table */
struct COMMAND_ARG GEOADD_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOADD data argument table */
struct COMMAND_ARG GEOADD_data_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOADD argument table */
struct COMMAND_ARG GEOADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOADD_condition_Subargs},
{MAKE_ARG("change",ARG_TYPE_PURE_TOKEN,-1,"CH",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,3,NULL),.subargs=GEOADD_data_Subargs},
};

/********** GEODIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEODIST history */
#define GEODIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEODIST tips */
#define GEODIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEODIST key specs */
keySpec GEODIST_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEODIST unit argument table */
struct COMMAND_ARG GEODIST_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEODIST argument table */
struct COMMAND_ARG GEODIST_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member2",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=GEODIST_unit_Subargs},
};

/********** GEOHASH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOHASH history */
#define GEOHASH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOHASH tips */
#define GEOHASH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOHASH key specs */
keySpec GEOHASH_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOHASH argument table */
struct COMMAND_ARG GEOHASH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** GEOPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOPOS history */
#define GEOPOS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOPOS tips */
#define GEOPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOPOS key specs */
keySpec GEOPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOPOS argument table */
struct COMMAND_ARG GEOPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** GEORADIUS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUS history */
commandHistory GEORADIUS_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUS tips */
#define GEORADIUS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUS key specs */
keySpec GEORADIUS_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STORE",6},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STOREDIST",6},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUS unit argument table */
struct COMMAND_ARG GEORADIUS_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS count_block argument table */
struct COMMAND_ARG GEORADIUS_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUS order argument table */
struct COMMAND_ARG GEORADIUS_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS store argument table */
struct COMMAND_ARG GEORADIUS_store_Subargs[] = {
{MAKE_ARG("storekey",ARG_TYPE_KEY,1,"STORE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
{MAKE_ARG("storedistkey",ARG_TYPE_KEY,2,"STOREDIST",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
};

/* GEORADIUS argument table */
struct COMMAND_ARG GEORADIUS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUS_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_order_Subargs},
{MAKE_ARG("store",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_store_Subargs},
};

/********** GEORADIUSBYMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUSBYMEMBER history */
commandHistory GEORADIUSBYMEMBER_History[] = {
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUSBYMEMBER tips */
#define GEORADIUSBYMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUSBYMEMBER key specs */
keySpec GEORADIUSBYMEMBER_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STORE",5},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STOREDIST",5},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUSBYMEMBER unit argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER count_block argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUSBYMEMBER order argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER store argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_store_Subargs[] = {
{MAKE_ARG("storekey",ARG_TYPE_KEY,1,"STORE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
{MAKE_ARG("storedistkey",ARG_TYPE_KEY,2,"STOREDIST",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
};

/* GEORADIUSBYMEMBER argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUSBYMEMBER_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_order_Subargs},
{MAKE_ARG("store",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_store_Subargs},
};

/********** GEORADIUSBYMEMBER_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUSBYMEMBER_RO history */
#define GEORADIUSBYMEMBER_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUSBYMEMBER_RO tips */
#define GEORADIUSBYMEMBER_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUSBYMEMBER_RO key specs */
keySpec GEORADIUSBYMEMBER_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUSBYMEMBER_RO unit argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO count_block argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO order argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUSBYMEMBER_RO_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_RO_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_RO_order_Subargs},
};

/********** GEORADIUS_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUS_RO history */
commandHistory GEORADIUS_RO_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUS_RO tips */
#define GEORADIUS_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUS_RO key specs */
keySpec GEORADIUS_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUS_RO unit argument table */
struct COMMAND_ARG GEORADIUS_RO_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS_RO count_block argument table */
struct COMMAND_ARG GEORADIUS_RO_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUS_RO order argument table */
struct COMMAND_ARG GEORADIUS_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS_RO argument table */
struct COMMAND_ARG GEORADIUS_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUS_RO_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_RO_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_RO_order_Subargs},
};

/********** GEOSEARCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOSEARCH history */
commandHistory GEOSEARCH_History[] = {
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOSEARCH tips */
#define GEOSEARCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOSEARCH key specs */
keySpec GEOSEARCH_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOSEARCH from fromlonlat argument table */
struct COMMAND_ARG GEOSEARCH_from_fromlonlat_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH from argument table */
struct COMMAND_ARG GEOSEARCH_from_Subargs[] = {
{MAKE_ARG("member",ARG_TYPE_STRING,-1,"FROMMEMBER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fromlonlat",ARG_TYPE_BLOCK,-1,"FROMLONLAT",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_from_fromlonlat_Subargs},
};

/* GEOSEARCH by circle unit argument table */
struct COMMAND_ARG GEOSEARCH_by_circle_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH by circle argument table */
struct COMMAND_ARG GEOSEARCH_by_circle_Subargs[] = {
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,"BYRADIUS",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCH_by_circle_unit_Subargs},
};

/* GEOSEARCH by box unit argument table */
struct COMMAND_ARG GEOSEARCH_by_box_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH by box argument table */
struct COMMAND_ARG GEOSEARCH_by_box_Subargs[] = {
{MAKE_ARG("width",ARG_TYPE_DOUBLE,-1,"BYBOX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("height",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCH_by_box_unit_Subargs},
};

/* GEOSEARCH by argument table */
struct COMMAND_ARG GEOSEARCH_by_Subargs[] = {
{MAKE_ARG("circle",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_by_circle_Subargs},
{MAKE_ARG("box",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=GEOSEARCH_by_box_Subargs},
};

/* GEOSEARCH order argument table */
struct COMMAND_ARG GEOSEARCH_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH count_block argument table */
struct COMMAND_ARG GEOSEARCH_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCH argument table */
struct COMMAND_ARG GEOSEARCH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("from",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_from_Subargs},
{MAKE_ARG("by",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_by_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCH_order_Subargs},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCH_count_block_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** GEOSEARCHSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOSEARCHSTORE history */
commandHistory GEOSEARCHSTORE_History[] = {
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOSEARCHSTORE tips */
#define GEOSEARCHSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOSEARCHSTORE key specs */
keySpec GEOSEARCHSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOSEARCHSTORE from fromlonlat argument table */
struct COMMAND_ARG GEOSEARCHSTORE_from_fromlonlat_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE from argument table */
struct COMMAND_ARG GEOSEARCHSTORE_from_Subargs[] = {
{MAKE_ARG("member",ARG_TYPE_STRING,-1,"FROMMEMBER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fromlonlat",ARG_TYPE_BLOCK,-1,"FROMLONLAT",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_from_fromlonlat_Subargs},
};

/* GEOSEARCHSTORE by circle unit argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_circle_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE by circle argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_circle_Subargs[] = {
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,"BYRADIUS",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCHSTORE_by_circle_unit_Subargs},
};

/* GEOSEARCHSTORE by box unit argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_box_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE by box argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_box_Subargs[] = {
{MAKE_ARG("width",ARG_TYPE_DOUBLE,-1,"BYBOX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("height",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCHSTORE_by_box_unit_Subargs},
};

/* GEOSEARCHSTORE by argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_Subargs[] = {
{MAKE_ARG("circle",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_by_circle_Subargs},
{MAKE_ARG("box",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=GEOSEARCHSTORE_by_box_Subargs},
};

/* GEOSEARCHSTORE order argument table */
struct COMMAND_ARG GEOSEARCHSTORE_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE count_block argument table */
struct COMMAND_ARG GEOSEARCHSTORE_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCHSTORE argument table */
struct COMMAND_ARG GEOSEARCHSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("source",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("from",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_from_Subargs},
{MAKE_ARG("by",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_by_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCHSTORE_order_Subargs},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCHSTORE_count_block_Subargs},
{MAKE_ARG("storedist",ARG_TYPE_PURE_TOKEN,-1,"STOREDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** HDEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HDEL history */
commandHistory HDEL_History[] = {
{"2.4.0","Accepts multiple `field` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HDEL tips */
#define HDEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HDEL key specs */
keySpec HDEL_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HDEL argument table */
struct COMMAND_ARG HDEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** HEXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HEXISTS history */
#define HEXISTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HEXISTS tips */
#define HEXISTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HEXISTS key specs */
keySpec HEXISTS_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HEXISTS argument table */
struct COMMAND_ARG HEXISTS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HGET history */
#define HGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HGET tips */
#define HGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HGET key specs */
keySpec HGET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HGET argument table */
struct COMMAND_ARG HGET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HGETALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HGETALL history */
#define HGETALL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HGETALL tips */
const char *HGETALL_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HGETALL key specs */
keySpec HGETALL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HGETALL argument table */
struct COMMAND_ARG HGETALL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HINCRBY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HINCRBY history */
#define HINCRBY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HINCRBY tips */
#define HINCRBY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HINCRBY key specs */
keySpec HINCRBY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HINCRBY argument table */
struct COMMAND_ARG HINCRBY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HINCRBYFLOAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HINCRBYFLOAT history */
#define HINCRBYFLOAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HINCRBYFLOAT tips */
#define HINCRBYFLOAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HINCRBYFLOAT key specs */
keySpec HINCRBYFLOAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HINCRBYFLOAT argument table */
struct COMMAND_ARG HINCRBYFLOAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HKEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HKEYS history */
#define HKEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HKEYS tips */
const char *HKEYS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HKEYS key specs */
keySpec HKEYS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HKEYS argument table */
struct COMMAND_ARG HKEYS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HLEN history */
#define HLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HLEN tips */
#define HLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HLEN key specs */
keySpec HLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HLEN argument table */
struct COMMAND_ARG HLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HMGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HMGET history */
#define HMGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HMGET tips */
#define HMGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HMGET key specs */
keySpec HMGET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HMGET argument table */
struct COMMAND_ARG HMGET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** HMSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HMSET history */
#define HMSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HMSET tips */
#define HMSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HMSET key specs */
keySpec HMSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HMSET data argument table */
struct COMMAND_ARG HMSET_data_Subargs[] = {
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HMSET argument table */
struct COMMAND_ARG HMSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=HMSET_data_Subargs},
};

/********** HRANDFIELD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HRANDFIELD history */
#define HRANDFIELD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HRANDFIELD tips */
const char *HRANDFIELD_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HRANDFIELD key specs */
keySpec HRANDFIELD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HRANDFIELD options argument table */
struct COMMAND_ARG HRANDFIELD_options_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withvalues",ARG_TYPE_PURE_TOKEN,-1,"WITHVALUES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* HRANDFIELD argument table */
struct COMMAND_ARG HRANDFIELD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("options",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=HRANDFIELD_options_Subargs},
};

/********** HSCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSCAN history */
#define HSCAN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSCAN tips */
const char *HSCAN_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSCAN key specs */
keySpec HSCAN_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSCAN argument table */
struct COMMAND_ARG HSCAN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** HSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSET history */
commandHistory HSET_History[] = {
{"4.0.0","Accepts multiple `field` and `value` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSET tips */
#define HSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSET key specs */
keySpec HSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSET data argument table */
struct COMMAND_ARG HSET_data_Subargs[] = {
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HSET argument table */
struct COMMAND_ARG HSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=HSET_data_Subargs},
};

/********** HSETNX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSETNX history */
#define HSETNX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSETNX tips */
#define HSETNX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSETNX key specs */
keySpec HSETNX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSETNX argument table */
struct COMMAND_ARG HSETNX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HSTRLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSTRLEN history */
#define HSTRLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSTRLEN tips */
#define HSTRLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSTRLEN key specs */
keySpec HSTRLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSTRLEN argument table */
struct COMMAND_ARG HSTRLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** HVALS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HVALS history */
#define HVALS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HVALS tips */
const char *HVALS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HVALS key specs */
keySpec HVALS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HVALS argument table */
struct COMMAND_ARG HVALS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PFADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFADD history */
#define PFADD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFADD tips */
#define PFADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFADD key specs */
keySpec PFADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PFADD argument table */
struct COMMAND_ARG PFADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PFCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFCOUNT history */
#define PFCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFCOUNT tips */
#define PFCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFCOUNT key specs */
keySpec PFCOUNT_Keyspecs[1] = {
{"RW because it may change the internal representation of the key, and propagate to replicas",CMD_KEY_RW|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* PFCOUNT argument table */
struct COMMAND_ARG PFCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PFDEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFDEBUG history */
#define PFDEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFDEBUG tips */
#define PFDEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFDEBUG key specs */
keySpec PFDEBUG_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PFDEBUG argument table */
struct COMMAND_ARG PFDEBUG_Args[] = {
{MAKE_ARG("subcommand",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PFMERGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFMERGE history */
#define PFMERGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFMERGE tips */
#define PFMERGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFMERGE key specs */
keySpec PFMERGE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* PFMERGE argument table */
struct COMMAND_ARG PFMERGE_Args[] = {
{MAKE_ARG("destkey",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sourcekey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PFSELFTEST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFSELFTEST history */
#define PFSELFTEST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFSELFTEST tips */
#define PFSELFTEST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFSELFTEST key specs */
#define PFSELFTEST_Keyspecs NULL
#endif

/********** BLMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLMOVE history */
#define BLMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLMOVE tips */
#define BLMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLMOVE key specs */
keySpec BLMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BLMOVE wherefrom argument table */
struct COMMAND_ARG BLMOVE_wherefrom_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMOVE whereto argument table */
struct COMMAND_ARG BLMOVE_whereto_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMOVE argument table */
struct COMMAND_ARG BLMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("wherefrom",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMOVE_wherefrom_Subargs},
{MAKE_ARG("whereto",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMOVE_whereto_Subargs},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** BLMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLMPOP history */
#define BLMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLMPOP tips */
#define BLMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLMPOP key specs */
keySpec BLMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* BLMPOP where argument table */
struct COMMAND_ARG BLMPOP_where_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMPOP argument table */
struct COMMAND_ARG BLMPOP_Args[] = {
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** BLPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLPOP history */
commandHistory BLPOP_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLPOP tips */
#define BLPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLPOP key specs */
keySpec BLPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BLPOP argument table */
struct COMMAND_ARG BLPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** BRPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BRPOP history */
commandHistory BRPOP_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BRPOP tips */
#define BRPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BRPOP key specs */
keySpec BRPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BRPOP argument table */
struct COMMAND_ARG BRPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** BRPOPLPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BRPOPLPUSH history */
commandHistory BRPOPLPUSH_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BRPOPLPUSH tips */
#define BRPOPLPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BRPOPLPUSH key specs */
keySpec BRPOPLPUSH_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BRPOPLPUSH argument table */
struct COMMAND_ARG BRPOPLPUSH_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LINDEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LINDEX history */
#define LINDEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LINDEX tips */
#define LINDEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LINDEX key specs */
keySpec LINDEX_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LINDEX argument table */
struct COMMAND_ARG LINDEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LINSERT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LINSERT history */
#define LINSERT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LINSERT tips */
#define LINSERT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LINSERT key specs */
keySpec LINSERT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LINSERT where argument table */
struct COMMAND_ARG LINSERT_where_Subargs[] = {
{MAKE_ARG("before",ARG_TYPE_PURE_TOKEN,-1,"BEFORE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("after",ARG_TYPE_PURE_TOKEN,-1,"AFTER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LINSERT argument table */
struct COMMAND_ARG LINSERT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LINSERT_where_Subargs},
{MAKE_ARG("pivot",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LLEN history */
#define LLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LLEN tips */
#define LLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LLEN key specs */
keySpec LLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LLEN argument table */
struct COMMAND_ARG LLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LMOVE history */
#define LMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LMOVE tips */
#define LMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LMOVE key specs */
keySpec LMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LMOVE wherefrom argument table */
struct COMMAND_ARG LMOVE_wherefrom_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMOVE whereto argument table */
struct COMMAND_ARG LMOVE_whereto_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMOVE argument table */
struct COMMAND_ARG LMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("wherefrom",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMOVE_wherefrom_Subargs},
{MAKE_ARG("whereto",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMOVE_whereto_Subargs},
};

/********** LMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LMPOP history */
#define LMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LMPOP tips */
#define LMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LMPOP key specs */
keySpec LMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* LMPOP where argument table */
struct COMMAND_ARG LMPOP_where_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMPOP argument table */
struct COMMAND_ARG LMPOP_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** LPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPOP history */
commandHistory LPOP_History[] = {
{"6.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPOP tips */
#define LPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPOP key specs */
keySpec LPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPOP argument table */
struct COMMAND_ARG LPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** LPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPOS history */
#define LPOS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPOS tips */
#define LPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPOS key specs */
keySpec LPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPOS argument table */
struct COMMAND_ARG LPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("rank",ARG_TYPE_INTEGER,-1,"RANK",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("num-matches",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("len",ARG_TYPE_INTEGER,-1,"MAXLEN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** LPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPUSH history */
commandHistory LPUSH_History[] = {
{"2.4.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPUSH tips */
#define LPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPUSH key specs */
keySpec LPUSH_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPUSH argument table */
struct COMMAND_ARG LPUSH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** LPUSHX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPUSHX history */
commandHistory LPUSHX_History[] = {
{"4.0.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPUSHX tips */
#define LPUSHX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPUSHX key specs */
keySpec LPUSHX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPUSHX argument table */
struct COMMAND_ARG LPUSHX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** LRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LRANGE history */
#define LRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LRANGE tips */
#define LRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LRANGE key specs */
keySpec LRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LRANGE argument table */
struct COMMAND_ARG LRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LREM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LREM history */
#define LREM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LREM tips */
#define LREM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LREM key specs */
keySpec LREM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LREM argument table */
struct COMMAND_ARG LREM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LSET history */
#define LSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LSET tips */
#define LSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LSET key specs */
keySpec LSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LSET argument table */
struct COMMAND_ARG LSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LTRIM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LTRIM history */
#define LTRIM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LTRIM tips */
#define LTRIM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LTRIM key specs */
keySpec LTRIM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LTRIM argument table */
struct COMMAND_ARG LTRIM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** RPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPOP history */
commandHistory RPOP_History[] = {
{"6.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPOP tips */
#define RPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPOP key specs */
keySpec RPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPOP argument table */
struct COMMAND_ARG RPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** RPOPLPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPOPLPUSH history */
#define RPOPLPUSH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPOPLPUSH tips */
#define RPOPLPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPOPLPUSH key specs */
keySpec RPOPLPUSH_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPOPLPUSH argument table */
struct COMMAND_ARG RPOPLPUSH_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** RPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPUSH history */
commandHistory RPUSH_History[] = {
{"2.4.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPUSH tips */
#define RPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPUSH key specs */
keySpec RPUSH_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPUSH argument table */
struct COMMAND_ARG RPUSH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** RPUSHX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPUSHX history */
commandHistory RPUSHX_History[] = {
{"4.0.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPUSHX tips */
#define RPUSHX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPUSHX key specs */
keySpec RPUSHX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPUSHX argument table */
struct COMMAND_ARG RPUSHX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PSUBSCRIBE history */
#define PSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PSUBSCRIBE tips */
#define PSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PSUBSCRIBE key specs */
#define PSUBSCRIBE_Keyspecs NULL
#endif

/* PSUBSCRIBE argument table */
struct COMMAND_ARG PSUBSCRIBE_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PUBLISH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBLISH history */
#define PUBLISH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBLISH tips */
#define PUBLISH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBLISH key specs */
#define PUBLISH_Keyspecs NULL
#endif

/* PUBLISH argument table */
struct COMMAND_ARG PUBLISH_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PUBSUB CHANNELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB CHANNELS history */
#define PUBSUB_CHANNELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB CHANNELS tips */
#define PUBSUB_CHANNELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB CHANNELS key specs */
#define PUBSUB_CHANNELS_Keyspecs NULL
#endif

/* PUBSUB CHANNELS argument table */
struct COMMAND_ARG PUBSUB_CHANNELS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** PUBSUB HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB HELP history */
#define PUBSUB_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB HELP tips */
#define PUBSUB_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB HELP key specs */
#define PUBSUB_HELP_Keyspecs NULL
#endif

/********** PUBSUB NUMPAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB NUMPAT history */
#define PUBSUB_NUMPAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB NUMPAT tips */
#define PUBSUB_NUMPAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB NUMPAT key specs */
#define PUBSUB_NUMPAT_Keyspecs NULL
#endif

/********** PUBSUB NUMSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB NUMSUB history */
#define PUBSUB_NUMSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB NUMSUB tips */
#define PUBSUB_NUMSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB NUMSUB key specs */
#define PUBSUB_NUMSUB_Keyspecs NULL
#endif

/* PUBSUB NUMSUB argument table */
struct COMMAND_ARG PUBSUB_NUMSUB_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PUBSUB SHARDCHANNELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB SHARDCHANNELS history */
#define PUBSUB_SHARDCHANNELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB SHARDCHANNELS tips */
#define PUBSUB_SHARDCHANNELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB SHARDCHANNELS key specs */
#define PUBSUB_SHARDCHANNELS_Keyspecs NULL
#endif

/* PUBSUB SHARDCHANNELS argument table */
struct COMMAND_ARG PUBSUB_SHARDCHANNELS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** PUBSUB SHARDNUMSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB SHARDNUMSUB history */
#define PUBSUB_SHARDNUMSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB SHARDNUMSUB tips */
#define PUBSUB_SHARDNUMSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB SHARDNUMSUB key specs */
#define PUBSUB_SHARDNUMSUB_Keyspecs NULL
#endif

/* PUBSUB SHARDNUMSUB argument table */
struct COMMAND_ARG PUBSUB_SHARDNUMSUB_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* PUBSUB command table */
struct COMMAND_STRUCT PUBSUB_Subcommands[] = {
{MAKE_CMD("channels","Returns the active channels.","O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_CHANNELS_History,0,PUBSUB_CHANNELS_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_CHANNELS_Keyspecs,0,NULL,1),.args=PUBSUB_CHANNELS_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_HELP_History,0,PUBSUB_HELP_Tips,0,pubsubCommand,2,CMD_LOADING|CMD_STALE,0,PUBSUB_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("numpat","Returns a count of unique pattern subscriptions.","O(1)","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_NUMPAT_History,0,PUBSUB_NUMPAT_Tips,0,pubsubCommand,2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_NUMPAT_Keyspecs,0,NULL,0)},
{MAKE_CMD("numsub","Returns a count of subscribers to channels.","O(N) for the NUMSUB subcommand, where N is the number of requested channels","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_NUMSUB_History,0,PUBSUB_NUMSUB_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_NUMSUB_Keyspecs,0,NULL,1),.args=PUBSUB_NUMSUB_Args},
{MAKE_CMD("shardchannels","Returns the active shard channels.","O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_SHARDCHANNELS_History,0,PUBSUB_SHARDCHANNELS_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_SHARDCHANNELS_Keyspecs,0,NULL,1),.args=PUBSUB_SHARDCHANNELS_Args},
{MAKE_CMD("shardnumsub","Returns the count of subscribers of shard channels.","O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_SHARDNUMSUB_History,0,PUBSUB_SHARDNUMSUB_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_SHARDNUMSUB_Keyspecs,0,NULL,1),.args=PUBSUB_SHARDNUMSUB_Args},
{0}
};

/********** PUBSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB history */
#define PUBSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB tips */
#define PUBSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB key specs */
#define PUBSUB_Keyspecs NULL
#endif

/********** PUNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUNSUBSCRIBE history */
#define PUNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUNSUBSCRIBE tips */
#define PUNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUNSUBSCRIBE key specs */
#define PUNSUBSCRIBE_Keyspecs NULL
#endif

/* PUNSUBSCRIBE argument table */
struct COMMAND_ARG PUNSUBSCRIBE_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SPUBLISH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SPUBLISH history */
#define SPUBLISH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SPUBLISH tips */
#define SPUBLISH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SPUBLISH key specs */
keySpec SPUBLISH_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SPUBLISH argument table */
struct COMMAND_ARG SPUBLISH_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SSUBSCRIBE history */
#define SSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SSUBSCRIBE tips */
#define SSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SSUBSCRIBE key specs */
keySpec SSUBSCRIBE_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SSUBSCRIBE argument table */
struct COMMAND_ARG SSUBSCRIBE_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUBSCRIBE history */
#define SUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUBSCRIBE tips */
#define SUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUBSCRIBE key specs */
#define SUBSCRIBE_Keyspecs NULL
#endif

/* SUBSCRIBE argument table */
struct COMMAND_ARG SUBSCRIBE_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SUNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUNSUBSCRIBE history */
#define SUNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUNSUBSCRIBE tips */
#define SUNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUNSUBSCRIBE key specs */
keySpec SUNSUBSCRIBE_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SUNSUBSCRIBE argument table */
struct COMMAND_ARG SUNSUBSCRIBE_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** UNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* UNSUBSCRIBE history */
#define UNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* UNSUBSCRIBE tips */
#define UNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* UNSUBSCRIBE key specs */
#define UNSUBSCRIBE_Keyspecs NULL
#endif

/* UNSUBSCRIBE argument table */
struct COMMAND_ARG UNSUBSCRIBE_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EVAL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVAL history */
#define EVAL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVAL tips */
#define EVAL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVAL key specs */
keySpec EVAL_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVAL argument table */
struct COMMAND_ARG EVAL_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EVALSHA ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVALSHA history */
#define EVALSHA_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVALSHA tips */
#define EVALSHA_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVALSHA key specs */
keySpec EVALSHA_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVALSHA argument table */
struct COMMAND_ARG EVALSHA_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EVALSHA_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVALSHA_RO history */
#define EVALSHA_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVALSHA_RO tips */
#define EVALSHA_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVALSHA_RO key specs */
keySpec EVALSHA_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVALSHA_RO argument table */
struct COMMAND_ARG EVALSHA_RO_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EVAL_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVAL_RO history */
#define EVAL_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVAL_RO tips */
#define EVAL_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVAL_RO key specs */
keySpec EVAL_RO_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVAL_RO argument table */
struct COMMAND_ARG EVAL_RO_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** FCALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FCALL history */
#define FCALL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FCALL tips */
#define FCALL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FCALL key specs */
keySpec FCALL_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* FCALL argument table */
struct COMMAND_ARG FCALL_Args[] = {
{MAKE_ARG("function",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** FCALL_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FCALL_RO history */
#define FCALL_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FCALL_RO tips */
#define FCALL_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FCALL_RO key specs */
keySpec FCALL_RO_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* FCALL_RO argument table */
struct COMMAND_ARG FCALL_RO_Args[] = {
{MAKE_ARG("function",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** FUNCTION DELETE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION DELETE history */
#define FUNCTION_DELETE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION DELETE tips */
const char *FUNCTION_DELETE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION DELETE key specs */
#define FUNCTION_DELETE_Keyspecs NULL
#endif

/* FUNCTION DELETE argument table */
struct COMMAND_ARG FUNCTION_DELETE_Args[] = {
{MAKE_ARG("library-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** FUNCTION DUMP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION DUMP history */
#define FUNCTION_DUMP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION DUMP tips */
#define FUNCTION_DUMP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION DUMP key specs */
#define FUNCTION_DUMP_Keyspecs NULL
#endif

/********** FUNCTION FLUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION FLUSH history */
#define FUNCTION_FLUSH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION FLUSH tips */
const char *FUNCTION_FLUSH_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION FLUSH key specs */
#define FUNCTION_FLUSH_Keyspecs NULL
#endif

/* FUNCTION FLUSH flush_type argument table */
struct COMMAND_ARG FUNCTION_FLUSH_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION FLUSH argument table */
struct COMMAND_ARG FUNCTION_FLUSH_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FUNCTION_FLUSH_flush_type_Subargs},
};

/********** FUNCTION HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION HELP history */
#define FUNCTION_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION HELP tips */
#define FUNCTION_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION HELP key specs */
#define FUNCTION_HELP_Keyspecs NULL
#endif

/********** FUNCTION KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION KILL history */
#define FUNCTION_KILL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION KILL tips */
const char *FUNCTION_KILL_Tips[] = {
"request_policy:all_shards",
"response_policy:one_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION KILL key specs */
#define FUNCTION_KILL_Keyspecs NULL
#endif

/********** FUNCTION LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION LIST history */
#define FUNCTION_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION LIST tips */
const char *FUNCTION_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION LIST key specs */
#define FUNCTION_LIST_Keyspecs NULL
#endif

/* FUNCTION LIST argument table */
struct COMMAND_ARG FUNCTION_LIST_Args[] = {
{MAKE_ARG("library-name-pattern",ARG_TYPE_STRING,-1,"LIBRARYNAME",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withcode",ARG_TYPE_PURE_TOKEN,-1,"WITHCODE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** FUNCTION LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION LOAD history */
#define FUNCTION_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION LOAD tips */
const char *FUNCTION_LOAD_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION LOAD key specs */
#define FUNCTION_LOAD_Keyspecs NULL
#endif

/* FUNCTION LOAD argument table */
struct COMMAND_ARG FUNCTION_LOAD_Args[] = {
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("function-code",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** FUNCTION RESTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION RESTORE history */
#define FUNCTION_RESTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION RESTORE tips */
const char *FUNCTION_RESTORE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION RESTORE key specs */
#define FUNCTION_RESTORE_Keyspecs NULL
#endif

/* FUNCTION RESTORE policy argument table */
struct COMMAND_ARG FUNCTION_RESTORE_policy_Subargs[] = {
{MAKE_ARG("flush",ARG_TYPE_PURE_TOKEN,-1,"FLUSH",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("append",ARG_TYPE_PURE_TOKEN,-1,"APPEND",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION RESTORE argument table */
struct COMMAND_ARG FUNCTION_RESTORE_Args[] = {
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("policy",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=FUNCTION_RESTORE_policy_Subargs},
};

/********** FUNCTION STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION STATS history */
#define FUNCTION_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION STATS tips */
const char *FUNCTION_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION STATS key specs */
#define FUNCTION_STATS_Keyspecs NULL
#endif

/* FUNCTION command table */
struct COMMAND_STRUCT FUNCTION_Subcommands[] = {
{MAKE_CMD("delete","Deletes a library and its functions.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_DELETE_History,0,FUNCTION_DELETE_Tips,2,functionDeleteCommand,3,CMD_NOSCRIPT|CMD_WRITE,ACL_CATEGORY_SCRIPTING,FUNCTION_DELETE_Keyspecs,0,NULL,1),.args=FUNCTION_DELETE_Args},
{MAKE_CMD("dump","Dumps all libraries into a serialized binary payload.","O(N) where N is the number of functions","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_DUMP_History,0,FUNCTION_DUMP_Tips,0,functionDumpCommand,2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,FUNCTION_DUMP_Keyspecs,0,NULL,0)},
{MAKE_CMD("flush","Deletes all libraries and functions.","O(N) where N is the number of functions deleted","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_FLUSH_History,0,FUNCTION_FLUSH_Tips,2,functionFlushCommand,-2,CMD_NOSCRIPT|CMD_WRITE,ACL_CATEGORY_SCRIPTING,FUNCTION_FLUSH_Keyspecs,0,NULL,1),.args=FUNCTION_FLUSH_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_HELP_History,0,FUNCTION_HELP_Tips,0,functionHelpCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_SCRIPTING,FUNCTION_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("kill","Terminates a function during execution.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_KILL_History,0,FUNCTION_KILL_Tips,2,functionKillCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,FUNCTION_KILL_Keyspecs,0,NULL,0)},
{MAKE_CMD("list","Returns information about all libraries.","O(N) where N is the number of functions","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_LIST_History,0,FUNCTION_LIST_Tips,1,functionListCommand,-2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,FUNCTION_LIST_Keyspecs,0,NULL,2),.args=FUNCTION_LIST_Args},
{MAKE_CMD("load","Creates a library.","O(1) (considering compilation time is redundant)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_LOAD_History,0,FUNCTION_LOAD_Tips,2,functionLoadCommand,-3,CMD_NOSCRIPT|CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SCRIPTING,FUNCTION_LOAD_Keyspecs,0,NULL,2),.args=FUNCTION_LOAD_Args},
{MAKE_CMD("restore","Restores all libraries from a payload.","O(N) where N is the number of functions on the payload","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_RESTORE_History,0,FUNCTION_RESTORE_Tips,2,functionRestoreCommand,-3,CMD_NOSCRIPT|CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SCRIPTING,FUNCTION_RESTORE_Keyspecs,0,NULL,2),.args=FUNCTION_RESTORE_Args},
{MAKE_CMD("stats","Returns information about a function during execution.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_STATS_History,0,FUNCTION_STATS_Tips,3,functionStatsCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,FUNCTION_STATS_Keyspecs,0,NULL,0)},
{0}
};

/********** FUNCTION ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION history */
#define FUNCTION_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION tips */
#define FUNCTION_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION key specs */
#define FUNCTION_Keyspecs NULL
#endif

/********** SCRIPT DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT DEBUG history */
#define SCRIPT_DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT DEBUG tips */
#define SCRIPT_DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT DEBUG key specs */
#define SCRIPT_DEBUG_Keyspecs NULL
#endif

/* SCRIPT DEBUG mode argument table */
struct COMMAND_ARG SCRIPT_DEBUG_mode_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT DEBUG argument table */
struct COMMAND_ARG SCRIPT_DEBUG_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=SCRIPT_DEBUG_mode_Subargs},
};

/********** SCRIPT EXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT EXISTS history */
#define SCRIPT_EXISTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT EXISTS tips */
const char *SCRIPT_EXISTS_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_logical_and",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT EXISTS key specs */
#define SCRIPT_EXISTS_Keyspecs NULL
#endif

/* SCRIPT EXISTS argument table */
struct COMMAND_ARG SCRIPT_EXISTS_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SCRIPT FLUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT FLUSH history */
commandHistory SCRIPT_FLUSH_History[] = {
{"6.2.0","Added the `ASYNC` and `SYNC` flushing mode modifiers."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT FLUSH tips */
const char *SCRIPT_FLUSH_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT FLUSH key specs */
#define SCRIPT_FLUSH_Keyspecs NULL
#endif

/* SCRIPT FLUSH flush_type argument table */
struct COMMAND_ARG SCRIPT_FLUSH_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT FLUSH argument table */
struct COMMAND_ARG SCRIPT_FLUSH_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=SCRIPT_FLUSH_flush_type_Subargs},
};

/********** SCRIPT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT HELP history */
#define SCRIPT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT HELP tips */
#define SCRIPT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT HELP key specs */
#define SCRIPT_HELP_Keyspecs NULL
#endif

/********** SCRIPT KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT KILL history */
#define SCRIPT_KILL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT KILL tips */
const char *SCRIPT_KILL_Tips[] = {
"request_policy:all_shards",
"response_policy:one_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT KILL key specs */
#define SCRIPT_KILL_Keyspecs NULL
#endif

/********** SCRIPT LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT LOAD history */
#define SCRIPT_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT LOAD tips */
const char *SCRIPT_LOAD_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT LOAD key specs */
#define SCRIPT_LOAD_Keyspecs NULL
#endif

/* SCRIPT LOAD argument table */
struct COMMAND_ARG SCRIPT_LOAD_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT command table */
struct COMMAND_STRUCT SCRIPT_Subcommands[] = {
{MAKE_CMD("debug","Sets the debug mode of server-side Lua scripts.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_DEBUG_History,0,SCRIPT_DEBUG_Tips,0,scriptCommand,3,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_DEBUG_Keyspecs,0,NULL,1),.args=SCRIPT_DEBUG_Args},
{MAKE_CMD("exists","Determines whether server-side Lua scripts exist in the script cache.","O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_EXISTS_History,0,SCRIPT_EXISTS_Tips,2,scriptCommand,-3,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_EXISTS_Keyspecs,0,NULL,1),.args=SCRIPT_EXISTS_Args},
{MAKE_CMD("flush","Removes all server-side Lua scripts from the script cache.","O(N) with N being the number of scripts in cache","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_FLUSH_History,1,SCRIPT_FLUSH_Tips,2,scriptCommand,-2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_FLUSH_Keyspecs,0,NULL,1),.args=SCRIPT_FLUSH_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_HELP_History,0,SCRIPT_HELP_Tips,0,scriptCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_SCRIPTING,SCRIPT_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("kill","Terminates a server-side Lua script during execution.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_KILL_History,0,SCRIPT_KILL_Tips,2,scriptCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,SCRIPT_KILL_Keyspecs,0,NULL,0)},
{MAKE_CMD("load","Loads a server-side Lua script to the script cache.","O(N) with N being the length in bytes of the script body.","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_LOAD_History,0,SCRIPT_LOAD_Tips,2,scriptCommand,3,CMD_NOSCRIPT|CMD_STALE,ACL_CATEGORY_SCRIPTING,SCRIPT_LOAD_Keyspecs,0,NULL,1),.args=SCRIPT_LOAD_Args},
{0}
};

/********** SCRIPT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT history */
#define SCRIPT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT tips */
#define SCRIPT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT key specs */
#define SCRIPT_Keyspecs NULL
#endif

/********** SENTINEL CKQUORUM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL CKQUORUM history */
#define SENTINEL_CKQUORUM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL CKQUORUM tips */
#define SENTINEL_CKQUORUM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL CKQUORUM key specs */
#define SENTINEL_CKQUORUM_Keyspecs NULL
#endif

/* SENTINEL CKQUORUM argument table */
struct COMMAND_ARG SENTINEL_CKQUORUM_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL CONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL CONFIG history */
commandHistory SENTINEL_CONFIG_History[] = {
{"7.2.0","Added the ability to set and get multiple parameters in one call."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL CONFIG tips */
#define SENTINEL_CONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL CONFIG key specs */
#define SENTINEL_CONFIG_Keyspecs NULL
#endif

/* SENTINEL CONFIG action set argument table */
struct COMMAND_ARG SENTINEL_CONFIG_action_set_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL CONFIG action argument table */
struct COMMAND_ARG SENTINEL_CONFIG_action_Subargs[] = {
{MAKE_ARG("set",ARG_TYPE_BLOCK,-1,"SET",NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_CONFIG_action_set_Subargs},
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,"GET",NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SENTINEL CONFIG argument table */
struct COMMAND_ARG SENTINEL_CONFIG_Args[] = {
{MAKE_ARG("action",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SENTINEL_CONFIG_action_Subargs},
};

/********** SENTINEL DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL DEBUG history */
#define SENTINEL_DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL DEBUG tips */
#define SENTINEL_DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL DEBUG key specs */
#define SENTINEL_DEBUG_Keyspecs NULL
#endif

/* SENTINEL DEBUG data argument table */
struct COMMAND_ARG SENTINEL_DEBUG_data_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL DEBUG argument table */
struct COMMAND_ARG SENTINEL_DEBUG_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_DEBUG_data_Subargs},
};

/********** SENTINEL FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL FAILOVER history */
#define SENTINEL_FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL FAILOVER tips */
#define SENTINEL_FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL FAILOVER key specs */
#define SENTINEL_FAILOVER_Keyspecs NULL
#endif

/* SENTINEL FAILOVER argument table */
struct COMMAND_ARG SENTINEL_FAILOVER_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL FLUSHCONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL FLUSHCONFIG history */
#define SENTINEL_FLUSHCONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL FLUSHCONFIG tips */
#define SENTINEL_FLUSHCONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL FLUSHCONFIG key specs */
#define SENTINEL_FLUSHCONFIG_Keyspecs NULL
#endif

/********** SENTINEL GET_MASTER_ADDR_BY_NAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME history */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME tips */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME key specs */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_Keyspecs NULL
#endif

/* SENTINEL GET_MASTER_ADDR_BY_NAME argument table */
struct COMMAND_ARG SENTINEL_GET_MASTER_ADDR_BY_NAME_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL HELP history */
#define SENTINEL_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL HELP tips */
#define SENTINEL_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL HELP key specs */
#define SENTINEL_HELP_Keyspecs NULL
#endif

/********** SENTINEL INFO_CACHE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL INFO_CACHE history */
#define SENTINEL_INFO_CACHE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL INFO_CACHE tips */
#define SENTINEL_INFO_CACHE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL INFO_CACHE key specs */
#define SENTINEL_INFO_CACHE_Keyspecs NULL
#endif

/* SENTINEL INFO_CACHE argument table */
struct COMMAND_ARG SENTINEL_INFO_CACHE_Args[] = {
{MAKE_ARG("nodename",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SENTINEL IS_MASTER_DOWN_BY_ADDR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR history */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR tips */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR key specs */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_Keyspecs NULL
#endif

/* SENTINEL IS_MASTER_DOWN_BY_ADDR argument table */
struct COMMAND_ARG SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args[] = {
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("current-epoch",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("runid",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL MASTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MASTER history */
#define SENTINEL_MASTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MASTER tips */
#define SENTINEL_MASTER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MASTER key specs */
#define SENTINEL_MASTER_Keyspecs NULL
#endif

/* SENTINEL MASTER argument table */
struct COMMAND_ARG SENTINEL_MASTER_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL MASTERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MASTERS history */
#define SENTINEL_MASTERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MASTERS tips */
#define SENTINEL_MASTERS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MASTERS key specs */
#define SENTINEL_MASTERS_Keyspecs NULL
#endif

/********** SENTINEL MONITOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MONITOR history */
#define SENTINEL_MONITOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MONITOR tips */
#define SENTINEL_MONITOR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MONITOR key specs */
#define SENTINEL_MONITOR_Keyspecs NULL
#endif

/* SENTINEL MONITOR argument table */
struct COMMAND_ARG SENTINEL_MONITOR_Args[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("quorum",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL MYID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MYID history */
#define SENTINEL_MYID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MYID tips */
#define SENTINEL_MYID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MYID key specs */
#define SENTINEL_MYID_Keyspecs NULL
#endif

/********** SENTINEL PENDING_SCRIPTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL PENDING_SCRIPTS history */
#define SENTINEL_PENDING_SCRIPTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL PENDING_SCRIPTS tips */
#define SENTINEL_PENDING_SCRIPTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL PENDING_SCRIPTS key specs */
#define SENTINEL_PENDING_SCRIPTS_Keyspecs NULL
#endif

/********** SENTINEL REMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL REMOVE history */
#define SENTINEL_REMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL REMOVE tips */
#define SENTINEL_REMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL REMOVE key specs */
#define SENTINEL_REMOVE_Keyspecs NULL
#endif

/* SENTINEL REMOVE argument table */
struct COMMAND_ARG SENTINEL_REMOVE_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL REPLICAS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL REPLICAS history */
#define SENTINEL_REPLICAS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL REPLICAS tips */
#define SENTINEL_REPLICAS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL REPLICAS key specs */
#define SENTINEL_REPLICAS_Keyspecs NULL
#endif

/* SENTINEL REPLICAS argument table */
struct COMMAND_ARG SENTINEL_REPLICAS_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL RESET history */
#define SENTINEL_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL RESET tips */
#define SENTINEL_RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL RESET key specs */
#define SENTINEL_RESET_Keyspecs NULL
#endif

/* SENTINEL RESET argument table */
struct COMMAND_ARG SENTINEL_RESET_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL SENTINELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SENTINELS history */
#define SENTINEL_SENTINELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SENTINELS tips */
#define SENTINEL_SENTINELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SENTINELS key specs */
#define SENTINEL_SENTINELS_Keyspecs NULL
#endif

/* SENTINEL SENTINELS argument table */
struct COMMAND_ARG SENTINEL_SENTINELS_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SENTINEL SET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SET history */
#define SENTINEL_SET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SET tips */
#define SENTINEL_SET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SET key specs */
#define SENTINEL_SET_Keyspecs NULL
#endif

/* SENTINEL SET data argument table */
struct COMMAND_ARG SENTINEL_SET_data_Subargs[] = {
{MAKE_ARG("option",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL SET argument table */
struct COMMAND_ARG SENTINEL_SET_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_SET_data_Subargs},
};

/********** SENTINEL SIMULATE_FAILURE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SIMULATE_FAILURE history */
#define SENTINEL_SIMULATE_FAILURE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SIMULATE_FAILURE tips */
#define SENTINEL_SIMULATE_FAILURE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SIMULATE_FAILURE key specs */
#define SENTINEL_SIMULATE_FAILURE_Keyspecs NULL
#endif

/* SENTINEL SIMULATE_FAILURE mode argument table */
struct COMMAND_ARG SENTINEL_SIMULATE_FAILURE_mode_Subargs[] = {
{MAKE_ARG("crash-after-election",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("crash-after-promotion",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("help",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL SIMULATE_FAILURE argument table */
struct COMMAND_ARG SENTINEL_SIMULATE_FAILURE_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,3,NULL),.subargs=SENTINEL_SIMULATE_FAILURE_mode_Subargs},
};

/********** SENTINEL SLAVES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SLAVES history */
#define SENTINEL_SLAVES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SLAVES tips */
#define SENTINEL_SLAVES_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SLAVES key specs */
#define SENTINEL_SLAVES_Keyspecs NULL
#endif

/* SENTINEL SLAVES argument table */
struct COMMAND_ARG SENTINEL_SLAVES_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL command table */
struct COMMAND_STRUCT SENTINEL_Subcommands[] = {
{MAKE_CMD("ckquorum","Checks for a Redis Sentinel quorum.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_CKQUORUM_History,0,SENTINEL_CKQUORUM_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_CKQUORUM_Keyspecs,0,NULL,1),.args=SENTINEL_CKQUORUM_Args},
{MAKE_CMD("config","Configures Redis Sentinel.","O(N) when N is the number of configuration parameters provided","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_CONFIG_History,1,SENTINEL_CONFIG_Tips,0,sentinelCommand,-4,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_CONFIG_Keyspecs,0,NULL,1),.args=SENTINEL_CONFIG_Args},
{MAKE_CMD("debug","Lists or updates the current configurable parameters of Redis Sentinel.","O(N) where N is the number of configurable parameters","7.0.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_DEBUG_History,0,SENTINEL_DEBUG_Tips,0,sentinelCommand,-2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_DEBUG_Keyspecs,0,NULL,1),.args=SENTINEL_DEBUG_Args},
{MAKE_CMD("failover","Forces a Redis Sentinel failover.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_FAILOVER_History,0,SENTINEL_FAILOVER_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_FAILOVER_Keyspecs,0,NULL,1),.args=SENTINEL_FAILOVER_Args},
{MAKE_CMD("flushconfig","Rewrites the Redis Sentinel configuration file.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_FLUSHCONFIG_History,0,SENTINEL_FLUSHCONFIG_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_FLUSHCONFIG_Keyspecs,0,NULL,0)},
{MAKE_CMD("get-master-addr-by-name","Returns the port and address of a master Redis instance.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_GET_MASTER_ADDR_BY_NAME_History,0,SENTINEL_GET_MASTER_ADDR_BY_NAME_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_GET_MASTER_ADDR_BY_NAME_Keyspecs,0,NULL,1),.args=SENTINEL_GET_MASTER_ADDR_BY_NAME_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_HELP_History,0,SENTINEL_HELP_Tips,0,sentinelCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("info-cache","Returns the cached `INFO` replies from the deployment's instances.","O(N) where N is the number of instances","3.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_INFO_CACHE_History,0,SENTINEL_INFO_CACHE_Tips,0,sentinelCommand,-3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_INFO_CACHE_Keyspecs,0,NULL,1),.args=SENTINEL_INFO_CACHE_Args},
{MAKE_CMD("is-master-down-by-addr","Determines whether a master Redis instance is down.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_IS_MASTER_DOWN_BY_ADDR_History,0,SENTINEL_IS_MASTER_DOWN_BY_ADDR_Tips,0,sentinelCommand,6,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_IS_MASTER_DOWN_BY_ADDR_Keyspecs,0,NULL,4),.args=SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args},
{MAKE_CMD("master","Returns the state of a master Redis instance.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MASTER_History,0,SENTINEL_MASTER_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MASTER_Keyspecs,0,NULL,1),.args=SENTINEL_MASTER_Args},
{MAKE_CMD("masters","Returns a list of monitored Redis masters.","O(N) where N is the number of masters","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MASTERS_History,0,SENTINEL_MASTERS_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MASTERS_Keyspecs,0,NULL,0)},
{MAKE_CMD("monitor","Starts monitoring.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MONITOR_History,0,SENTINEL_MONITOR_Tips,0,sentinelCommand,6,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MONITOR_Keyspecs,0,NULL,4),.args=SENTINEL_MONITOR_Args},
{MAKE_CMD("myid","Returns the Redis Sentinel instance ID.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MYID_History,0,SENTINEL_MYID_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MYID_Keyspecs,0,NULL,0)},
{MAKE_CMD("pending-scripts","Returns information about pending scripts for Redis Sentinel.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_PENDING_SCRIPTS_History,0,SENTINEL_PENDING_SCRIPTS_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_PENDING_SCRIPTS_Keyspecs,0,NULL,0)},
{MAKE_CMD("remove","Stops monitoring.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_REMOVE_History,0,SENTINEL_REMOVE_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_REMOVE_Keyspecs,0,NULL,1),.args=SENTINEL_REMOVE_Args},
{MAKE_CMD("replicas","Returns a list of the monitored Redis replicas.","O(N) where N is the number of replicas","5.0.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_REPLICAS_History,0,SENTINEL_REPLICAS_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_REPLICAS_Keyspecs,0,NULL,1),.args=SENTINEL_REPLICAS_Args},
{MAKE_CMD("reset","Resets Redis masters by name matching a pattern.","O(N) where N is the number of monitored masters","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_RESET_History,0,SENTINEL_RESET_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_RESET_Keyspecs,0,NULL,1),.args=SENTINEL_RESET_Args},
{MAKE_CMD("sentinels","Returns a list of Sentinel instances.","O(N) where N is the number of Sentinels","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SENTINELS_History,0,SENTINEL_SENTINELS_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SENTINELS_Keyspecs,0,NULL,1),.args=SENTINEL_SENTINELS_Args},
{MAKE_CMD("set","Changes the configuration of a monitored Redis master.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SET_History,0,SENTINEL_SET_Tips,0,sentinelCommand,-5,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SET_Keyspecs,0,NULL,2),.args=SENTINEL_SET_Args},
{MAKE_CMD("simulate-failure","Simulates failover scenarios.",NULL,"3.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SIMULATE_FAILURE_History,0,SENTINEL_SIMULATE_FAILURE_Tips,0,sentinelCommand,-3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SIMULATE_FAILURE_Keyspecs,0,NULL,1),.args=SENTINEL_SIMULATE_FAILURE_Args},
{MAKE_CMD("slaves","Returns a list of the monitored replicas.","O(N) where N is the number of replicas.","2.8.0",CMD_DOC_DEPRECATED,"`SENTINEL REPLICAS`","5.0.0","sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SLAVES_History,0,SENTINEL_SLAVES_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SLAVES_Keyspecs,0,NULL,1),.args=SENTINEL_SLAVES_Args},
{0}
};

/********** SENTINEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL history */
#define SENTINEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL tips */
#define SENTINEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL key specs */
#define SENTINEL_Keyspecs NULL
#endif

/********** ACL CAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL CAT history */
#define ACL_CAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL CAT tips */
#define ACL_CAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL CAT key specs */
#define ACL_CAT_Keyspecs NULL
#endif

/* ACL CAT argument table */
struct COMMAND_ARG ACL_CAT_Args[] = {
{MAKE_ARG("category",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** ACL DELUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL DELUSER history */
#define ACL_DELUSER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL DELUSER tips */
const char *ACL_DELUSER_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL DELUSER key specs */
#define ACL_DELUSER_Keyspecs NULL
#endif

/* ACL DELUSER argument table */
struct COMMAND_ARG ACL_DELUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** ACL DRYRUN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL DRYRUN history */
#define ACL_DRYRUN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL DRYRUN tips */
#define ACL_DRYRUN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL DRYRUN key specs */
#define ACL_DRYRUN_Keyspecs NULL
#endif

/* ACL DRYRUN argument table */
struct COMMAND_ARG ACL_DRYRUN_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** ACL GENPASS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL GENPASS history */
#define ACL_GENPASS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL GENPASS tips */
#define ACL_GENPASS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL GENPASS key specs */
#define ACL_GENPASS_Keyspecs NULL
#endif

/* ACL GENPASS argument table */
struct COMMAND_ARG ACL_GENPASS_Args[] = {
{MAKE_ARG("bits",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** ACL GETUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL GETUSER history */
commandHistory ACL_GETUSER_History[] = {
{"6.2.0","Added Pub/Sub channel patterns."},
{"7.0.0","Added selectors and changed the format of key and channel patterns from a list to their rule representation."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL GETUSER tips */
#define ACL_GETUSER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL GETUSER key specs */
#define ACL_GETUSER_Keyspecs NULL
#endif

/* ACL GETUSER argument table */
struct COMMAND_ARG ACL_GETUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** ACL HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL HELP history */
#define ACL_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL HELP tips */
#define ACL_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL HELP key specs */
#define ACL_HELP_Keyspecs NULL
#endif

/********** ACL LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LIST history */
#define ACL_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LIST tips */
#define ACL_LIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LIST key specs */
#define ACL_LIST_Keyspecs NULL
#endif

/********** ACL LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LOAD history */
#define ACL_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LOAD tips */
#define ACL_LOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LOAD key specs */
#define ACL_LOAD_Keyspecs NULL
#endif

/********** ACL LOG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LOG history */
commandHistory ACL_LOG_History[] = {
{"7.2.0","Added entry ID, timestamp created, and timestamp last updated."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LOG tips */
#define ACL_LOG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LOG key specs */
#define ACL_LOG_Keyspecs NULL
#endif

/* ACL LOG operation argument table */
struct COMMAND_ARG ACL_LOG_operation_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("reset",ARG_TYPE_PURE_TOKEN,-1,"RESET",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ACL LOG argument table */
struct COMMAND_ARG ACL_LOG_Args[] = {
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ACL_LOG_operation_Subargs},
};

/********** ACL SAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL SAVE history */
#define ACL_SAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL SAVE tips */
const char *ACL_SAVE_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL SAVE key specs */
#define ACL_SAVE_Keyspecs NULL
#endif

/********** ACL SETUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL SETUSER history */
commandHistory ACL_SETUSER_History[] = {
{"6.2.0","Added Pub/Sub channel patterns."},
{"7.0.0","Added selectors and key based permissions."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL SETUSER tips */
const char *ACL_SETUSER_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL SETUSER key specs */
#define ACL_SETUSER_Keyspecs NULL
#endif

/* ACL SETUSER argument table */
struct COMMAND_ARG ACL_SETUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("rule",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** ACL USERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL USERS history */
#define ACL_USERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL USERS tips */
#define ACL_USERS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL USERS key specs */
#define ACL_USERS_Keyspecs NULL
#endif

/********** ACL WHOAMI ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL WHOAMI history */
#define ACL_WHOAMI_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL WHOAMI tips */
#define ACL_WHOAMI_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL WHOAMI key specs */
#define ACL_WHOAMI_Keyspecs NULL
#endif

/* ACL command table */
struct COMMAND_STRUCT ACL_Subcommands[] = {
{MAKE_CMD("cat","Lists the ACL categories, or the commands inside a category.","O(1) since the categories and commands are a fixed set.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_CAT_History,0,ACL_CAT_Tips,0,aclCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_CAT_Keyspecs,0,NULL,1),.args=ACL_CAT_Args},
{MAKE_CMD("deluser","Deletes ACL users, and terminates their connections.","O(1) amortized time considering the typical user.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_DELUSER_History,0,ACL_DELUSER_Tips,2,aclCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_DELUSER_Keyspecs,0,NULL,1),.args=ACL_DELUSER_Args},
{MAKE_CMD("dryrun","Simulates the execution of a command by a user, without executing the command.","O(1).","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_DRYRUN_History,0,ACL_DRYRUN_Tips,0,aclCommand,-4,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_DRYRUN_Keyspecs,0,NULL,3),.args=ACL_DRYRUN_Args},
{MAKE_CMD("genpass","Generates a pseudorandom, secure password that can be used to identify ACL users.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_GENPASS_History,0,ACL_GENPASS_Tips,0,aclCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_GENPASS_Keyspecs,0,NULL,1),.args=ACL_GENPASS_Args},
{MAKE_CMD("getuser","Lists the ACL rules of a user.","O(N). Where N is the number of password, command and pattern rules that the user has.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_GETUSER_History,2,ACL_GETUSER_Tips,0,aclCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_GETUSER_Keyspecs,0,NULL,1),.args=ACL_GETUSER_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_HELP_History,0,ACL_HELP_Tips,0,aclCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("list","Dumps the effective rules in ACL file format.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LIST_History,0,ACL_LIST_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LIST_Keyspecs,0,NULL,0)},
{MAKE_CMD("load","Reloads the rules from the configured ACL file.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LOAD_History,0,ACL_LOAD_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LOAD_Keyspecs,0,NULL,0)},
{MAKE_CMD("log","Lists recent security events generated due to ACL rules.","O(N) with N being the number of entries shown.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LOG_History,1,ACL_LOG_Tips,0,aclCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LOG_Keyspecs,0,NULL,1),.args=ACL_LOG_Args},
{MAKE_CMD("save","Saves the effective ACL rules in the configured ACL file.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_SAVE_History,0,ACL_SAVE_Tips,2,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_SAVE_Keyspecs,0,NULL,0)},
{MAKE_CMD("setuser","Creates and modifies an ACL user and its rules.","O(N). Where N is the number of rules provided.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_SETUSER_History,2,ACL_SETUSER_Tips,2,aclCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_SETUSER_Keyspecs,0,NULL,2),.args=ACL_SETUSER_Args},
{MAKE_CMD("users","Lists all ACL users.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_USERS_History,0,ACL_USERS_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_USERS_Keyspecs,0,NULL,0)},
{MAKE_CMD("whoami","Returns the authenticated username of the current connection.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_WHOAMI_History,0,ACL_WHOAMI_Tips,0,aclCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_WHOAMI_Keyspecs,0,NULL,0)},
{0}
};

/********** ACL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL history */
#define ACL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL tips */
#define ACL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL key specs */
#define ACL_Keyspecs NULL
#endif

/********** BGREWRITEAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BGREWRITEAOF history */
#define BGREWRITEAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BGREWRITEAOF tips */
#define BGREWRITEAOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BGREWRITEAOF key specs */
#define BGREWRITEAOF_Keyspecs NULL
#endif

/********** BGSAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BGSAVE history */
commandHistory BGSAVE_History[] = {
{"3.2.2","Added the `SCHEDULE` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BGSAVE tips */
#define BGSAVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BGSAVE key specs */
#define BGSAVE_Keyspecs NULL
#endif

/* BGSAVE argument table */
struct COMMAND_ARG BGSAVE_Args[] = {
{MAKE_ARG("schedule",ARG_TYPE_PURE_TOKEN,-1,"SCHEDULE",NULL,"3.2.2",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** COMMAND COUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND COUNT history */
#define COMMAND_COUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND COUNT tips */
#define COMMAND_COUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND COUNT key specs */
#define COMMAND_COUNT_Keyspecs NULL
#endif

/********** COMMAND DOCS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND DOCS history */
#define COMMAND_DOCS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND DOCS tips */
const char *COMMAND_DOCS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND DOCS key specs */
#define COMMAND_DOCS_Keyspecs NULL
#endif

/* COMMAND DOCS argument table */
struct COMMAND_ARG COMMAND_DOCS_Args[] = {
{MAKE_ARG("command-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** COMMAND GETKEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND GETKEYS history */
#define COMMAND_GETKEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND GETKEYS tips */
#define COMMAND_GETKEYS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND GETKEYS key specs */
#define COMMAND_GETKEYS_Keyspecs NULL
#endif

/* COMMAND GETKEYS argument table */
struct COMMAND_ARG COMMAND_GETKEYS_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** COMMAND GETKEYSANDFLAGS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND GETKEYSANDFLAGS history */
#define COMMAND_GETKEYSANDFLAGS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND GETKEYSANDFLAGS tips */
#define COMMAND_GETKEYSANDFLAGS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND GETKEYSANDFLAGS key specs */
#define COMMAND_GETKEYSANDFLAGS_Keyspecs NULL
#endif

/* COMMAND GETKEYSANDFLAGS argument table */
struct COMMAND_ARG COMMAND_GETKEYSANDFLAGS_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** COMMAND HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND HELP history */
#define COMMAND_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND HELP tips */
#define COMMAND_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND HELP key specs */
#define COMMAND_HELP_Keyspecs NULL
#endif

/********** COMMAND INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND INFO history */
commandHistory COMMAND_INFO_History[] = {
{"7.0.0","Allowed to be called with no argument to get info on all commands."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND INFO tips */
const char *COMMAND_INFO_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND INFO key specs */
#define COMMAND_INFO_Keyspecs NULL
#endif

/* COMMAND INFO argument table */
struct COMMAND_ARG COMMAND_INFO_Args[] = {
{MAKE_ARG("command-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** COMMAND LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND LIST history */
#define COMMAND_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND LIST tips */
const char *COMMAND_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND LIST key specs */
#define COMMAND_LIST_Keyspecs NULL
#endif

/* COMMAND LIST filterby argument table */
struct COMMAND_ARG COMMAND_LIST_filterby_Subargs[] = {
{MAKE_ARG("module-name",ARG_TYPE_STRING,-1,"MODULE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("category",ARG_TYPE_STRING,-1,"ACLCAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"PATTERN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* COMMAND LIST argument table */
struct COMMAND_ARG COMMAND_LIST_Args[] = {
{MAKE_ARG("filterby",ARG_TYPE_ONEOF,-1,"FILTERBY",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=COMMAND_LIST_filterby_Subargs},
};

/* COMMAND command table */
struct COMMAND_STRUCT COMMAND_Subcommands[] = {
{MAKE_CMD("count","Returns a count of commands.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_COUNT_History,0,COMMAND_COUNT_Tips,0,commandCountCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_COUNT_Keyspecs,0,NULL,0)},
{MAKE_CMD("docs","Returns documentary information about one, multiple or all commands.","O(N) where N is the number of commands to look up","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_DOCS_History,0,COMMAND_DOCS_Tips,1,commandDocsCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_DOCS_Keyspecs,0,NULL,1),.args=COMMAND_DOCS_Args},
{MAKE_CMD("getkeys","Extracts the key names from an arbitrary command.","O(N) where N is the number of arguments to the command","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_GETKEYS_History,0,COMMAND_GETKEYS_Tips,0,commandGetKeysCommand,-3,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_GETKEYS_Keyspecs,0,NULL,2),.args=COMMAND_GETKEYS_Args},
{MAKE_CMD("getkeysandflags","Extracts the key names and access flags for an arbitrary command.","O(N) where N is the number of arguments to the command","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_GETKEYSANDFLAGS_History,0,COMMAND_GETKEYSANDFLAGS_Tips,0,commandGetKeysAndFlagsCommand,-3,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_GETKEYSANDFLAGS_Keyspecs,0,NULL,2),.args=COMMAND_GETKEYSANDFLAGS_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_HELP_History,0,COMMAND_HELP_Tips,0,commandHelpCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("info","Returns information about one, multiple or all commands.","O(N) where N is the number of commands to look up","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_INFO_History,1,COMMAND_INFO_Tips,1,commandInfoCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_INFO_Keyspecs,0,NULL,1),.args=COMMAND_INFO_Args},
{MAKE_CMD("list","Returns a list of command names.","O(N) where N is the total number of Redis commands","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_LIST_History,0,COMMAND_LIST_Tips,1,commandListCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_LIST_Keyspecs,0,NULL,1),.args=COMMAND_LIST_Args},
{0}
};

/********** COMMAND ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND history */
#define COMMAND_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND tips */
const char *COMMAND_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND key specs */
#define COMMAND_Keyspecs NULL
#endif

/********** CONFIG GET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG GET history */
commandHistory CONFIG_GET_History[] = {
{"7.0.0","Added the ability to pass multiple pattern parameters in one call"},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG GET tips */
#define CONFIG_GET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG GET key specs */
#define CONFIG_GET_Keyspecs NULL
#endif

/* CONFIG GET argument table */
struct COMMAND_ARG CONFIG_GET_Args[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** CONFIG HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG HELP history */
#define CONFIG_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG HELP tips */
#define CONFIG_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG HELP key specs */
#define CONFIG_HELP_Keyspecs NULL
#endif

/********** CONFIG RESETSTAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG RESETSTAT history */
#define CONFIG_RESETSTAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG RESETSTAT tips */
const char *CONFIG_RESETSTAT_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG RESETSTAT key specs */
#define CONFIG_RESETSTAT_Keyspecs NULL
#endif

/********** CONFIG REWRITE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG REWRITE history */
#define CONFIG_REWRITE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG REWRITE tips */
const char *CONFIG_REWRITE_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG REWRITE key specs */
#define CONFIG_REWRITE_Keyspecs NULL
#endif

/********** CONFIG SET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG SET history */
commandHistory CONFIG_SET_History[] = {
{"7.0.0","Added the ability to set multiple parameters in one call."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG SET tips */
const char *CONFIG_SET_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG SET key specs */
#define CONFIG_SET_Keyspecs NULL
#endif

/* CONFIG SET data argument table */
struct COMMAND_ARG CONFIG_SET_data_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CONFIG SET argument table */
struct COMMAND_ARG CONFIG_SET_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CONFIG_SET_data_Subargs},
};

/* CONFIG command table */
struct COMMAND_STRUCT CONFIG_Subcommands[] = {
{MAKE_CMD("get","Returns the effective values of configuration parameters.","O(N) when N is the number of configuration parameters provided","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_GET_History,1,CONFIG_GET_Tips,0,configGetCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_GET_Keyspecs,0,NULL,1),.args=CONFIG_GET_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_HELP_History,0,CONFIG_HELP_Tips,0,configHelpCommand,2,CMD_LOADING|CMD_STALE,0,CONFIG_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("resetstat","Resets the server's statistics.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_RESETSTAT_History,0,CONFIG_RESETSTAT_Tips,2,configResetStatCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_RESETSTAT_Keyspecs,0,NULL,0)},
{MAKE_CMD("rewrite","Persists the effective configuration to file.","O(1)","2.8.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_REWRITE_History,0,CONFIG_REWRITE_Tips,2,configRewriteCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_REWRITE_Keyspecs,0,NULL,0)},
{MAKE_CMD("set","Sets configuration parameters in-flight.","O(N) when N is the number of configuration parameters provided","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_SET_History,1,CONFIG_SET_Tips,2,configSetCommand,-4,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_SET_Keyspecs,0,NULL,1),.args=CONFIG_SET_Args},
{0}
};

/********** CONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG history */
#define CONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG tips */
#define CONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG key specs */
#define CONFIG_Keyspecs NULL
#endif

/********** DBSIZE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DBSIZE history */
#define DBSIZE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DBSIZE tips */
const char *DBSIZE_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DBSIZE key specs */
#define DBSIZE_Keyspecs NULL
#endif

/********** DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DEBUG history */
#define DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DEBUG tips */
#define DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DEBUG key specs */
#define DEBUG_Keyspecs NULL
#endif

/********** FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FAILOVER history */
#define FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FAILOVER tips */
#define FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FAILOVER key specs */
#define FAILOVER_Keyspecs NULL
#endif

/* FAILOVER target argument table */
struct COMMAND_ARG FAILOVER_target_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* FAILOVER argument table */
struct COMMAND_ARG FAILOVER_Args[] = {
{MAKE_ARG("target",ARG_TYPE_BLOCK,-1,"TO",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=FAILOVER_target_Subargs},
{MAKE_ARG("abort",ARG_TYPE_PURE_TOKEN,-1,"ABORT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"TIMEOUT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** FLUSHALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FLUSHALL history */
commandHistory FLUSHALL_History[] = {
{"4.0.0","Added the `ASYNC` flushing mode modifier."},
{"6.2.0","Added the `SYNC` flushing mode modifier."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FLUSHALL tips */
const char *FLUSHALL_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FLUSHALL key specs */
#define FLUSHALL_Keyspecs NULL
#endif

/* FLUSHALL flush_type argument table */
struct COMMAND_ARG FLUSHALL_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,"4.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* FLUSHALL argument table */
struct COMMAND_ARG FLUSHALL_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FLUSHALL_flush_type_Subargs},
};

/********** FLUSHDB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FLUSHDB history */
commandHistory FLUSHDB_History[] = {
{"4.0.0","Added the `ASYNC` flushing mode modifier."},
{"6.2.0","Added the `SYNC` flushing mode modifier."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FLUSHDB tips */
const char *FLUSHDB_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FLUSHDB key specs */
#define FLUSHDB_Keyspecs NULL
#endif

/* FLUSHDB flush_type argument table */
struct COMMAND_ARG FLUSHDB_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,"4.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* FLUSHDB argument table */
struct COMMAND_ARG FLUSHDB_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FLUSHDB_flush_type_Subargs},
};

/********** INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* INFO history */
commandHistory INFO_History[] = {
{"7.0.0","Added support for taking multiple section arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* INFO tips */
const char *INFO_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* INFO key specs */
#define INFO_Keyspecs NULL
#endif

/* INFO argument table */
struct COMMAND_ARG INFO_Args[] = {
{MAKE_ARG("section",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** LASTSAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LASTSAVE history */
#define LASTSAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LASTSAVE tips */
const char *LASTSAVE_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LASTSAVE key specs */
#define LASTSAVE_Keyspecs NULL
#endif

/********** LATENCY DOCTOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY DOCTOR history */
#define LATENCY_DOCTOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY DOCTOR tips */
const char *LATENCY_DOCTOR_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY DOCTOR key specs */
#define LATENCY_DOCTOR_Keyspecs NULL
#endif

/********** LATENCY GRAPH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY GRAPH history */
#define LATENCY_GRAPH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY GRAPH tips */
const char *LATENCY_GRAPH_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY GRAPH key specs */
#define LATENCY_GRAPH_Keyspecs NULL
#endif

/* LATENCY GRAPH argument table */
struct COMMAND_ARG LATENCY_GRAPH_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LATENCY HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HELP history */
#define LATENCY_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HELP tips */
#define LATENCY_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HELP key specs */
#define LATENCY_HELP_Keyspecs NULL
#endif

/********** LATENCY HISTOGRAM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HISTOGRAM history */
#define LATENCY_HISTOGRAM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HISTOGRAM tips */
const char *LATENCY_HISTOGRAM_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HISTOGRAM key specs */
#define LATENCY_HISTOGRAM_Keyspecs NULL
#endif

/* LATENCY HISTOGRAM argument table */
struct COMMAND_ARG LATENCY_HISTOGRAM_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** LATENCY HISTORY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HISTORY history */
#define LATENCY_HISTORY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HISTORY tips */
const char *LATENCY_HISTORY_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HISTORY key specs */
#define LATENCY_HISTORY_Keyspecs NULL
#endif

/* LATENCY HISTORY argument table */
struct COMMAND_ARG LATENCY_HISTORY_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** LATENCY LATEST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY LATEST history */
#define LATENCY_LATEST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY LATEST tips */
const char *LATENCY_LATEST_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY LATEST key specs */
#define LATENCY_LATEST_Keyspecs NULL
#endif

/********** LATENCY RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY RESET history */
#define LATENCY_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY RESET tips */
const char *LATENCY_RESET_Tips[] = {
"request_policy:all_nodes",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY RESET key specs */
#define LATENCY_RESET_Keyspecs NULL
#endif

/* LATENCY RESET argument table */
struct COMMAND_ARG LATENCY_RESET_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* LATENCY command table */
struct COMMAND_STRUCT LATENCY_Subcommands[] = {
{MAKE_CMD("doctor","Returns a human-readable latency analysis report.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_DOCTOR_History,0,LATENCY_DOCTOR_Tips,3,latencyCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_DOCTOR_Keyspecs,0,NULL,0)},
{MAKE_CMD("graph","Returns a latency graph for an event.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_GRAPH_History,0,LATENCY_GRAPH_Tips,3,latencyCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_GRAPH_Keyspecs,0,NULL,1),.args=LATENCY_GRAPH_Args},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HELP_History,0,LATENCY_HELP_Tips,0,latencyCommand,2,CMD_LOADING|CMD_STALE,0,LATENCY_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("histogram","Returns the cumulative distribution of latencies of a subset or all commands.","O(N) where N is the number of commands with latency information being retrieved.","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HISTOGRAM_History,0,LATENCY_HISTOGRAM_Tips,3,latencyCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_HISTOGRAM_Keyspecs,0,NULL,1),.args=LATENCY_HISTOGRAM_Args},
{MAKE_CMD("history","Returns timestamp-latency samples for an event.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HISTORY_History,0,LATENCY_HISTORY_Tips,3,latencyCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_HISTORY_Keyspecs,0,NULL,1),.args=LATENCY_HISTORY_Args},
{MAKE_CMD("latest","Returns the latest latency samples for all events.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_LATEST_History,0,LATENCY_LATEST_Tips,3,latencyCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_LATEST_Keyspecs,0,NULL,0)},
{MAKE_CMD("reset","Resets the latency data for one or more events.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_RESET_History,0,LATENCY_RESET_Tips,2,latencyCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_RESET_Keyspecs,0,NULL,1),.args=LATENCY_RESET_Args},
{0}
};

/********** LATENCY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY history */
#define LATENCY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY tips */
#define LATENCY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY key specs */
#define LATENCY_Keyspecs NULL
#endif

/********** LOLWUT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LOLWUT history */
#define LOLWUT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LOLWUT tips */
#define LOLWUT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LOLWUT key specs */
#define LOLWUT_Keyspecs NULL
#endif

/* LOLWUT argument table */
struct COMMAND_ARG LOLWUT_Args[] = {
{MAKE_ARG("version",ARG_TYPE_INTEGER,-1,"VERSION",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** MEMORY DOCTOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY DOCTOR history */
#define MEMORY_DOCTOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY DOCTOR tips */
const char *MEMORY_DOCTOR_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY DOCTOR key specs */
#define MEMORY_DOCTOR_Keyspecs NULL
#endif

/********** MEMORY HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY HELP history */
#define MEMORY_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY HELP tips */
#define MEMORY_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY HELP key specs */
#define MEMORY_HELP_Keyspecs NULL
#endif

/********** MEMORY MALLOC_STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY MALLOC_STATS history */
#define MEMORY_MALLOC_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY MALLOC_STATS tips */
const char *MEMORY_MALLOC_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY MALLOC_STATS key specs */
#define MEMORY_MALLOC_STATS_Keyspecs NULL
#endif

/********** MEMORY PURGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY PURGE history */
#define MEMORY_PURGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY PURGE tips */
const char *MEMORY_PURGE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY PURGE key specs */
#define MEMORY_PURGE_Keyspecs NULL
#endif

/********** MEMORY STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY STATS history */
#define MEMORY_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY STATS tips */
const char *MEMORY_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY STATS key specs */
#define MEMORY_STATS_Keyspecs NULL
#endif

/********** MEMORY USAGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY USAGE history */
#define MEMORY_USAGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY USAGE tips */
#define MEMORY_USAGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY USAGE key specs */
keySpec MEMORY_USAGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* MEMORY USAGE argument table */
struct COMMAND_ARG MEMORY_USAGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"SAMPLES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* MEMORY command table */
struct COMMAND_STRUCT MEMORY_Subcommands[] = {
{MAKE_CMD("doctor","Outputs a memory problems report.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_DOCTOR_History,0,MEMORY_DOCTOR_Tips,3,memoryCommand,2,0,0,MEMORY_DOCTOR_Keyspecs,0,NULL,0)},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_HELP_History,0,MEMORY_HELP_Tips,0,memoryCommand,2,CMD_LOADING|CMD_STALE,0,MEMORY_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("malloc-stats","Returns the allocator statistics.","Depends on how much memory is allocated, could be slow","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_MALLOC_STATS_History,0,MEMORY_MALLOC_STATS_Tips,3,memoryCommand,2,0,0,MEMORY_MALLOC_STATS_Keyspecs,0,NULL,0)},
{MAKE_CMD("purge","Asks the allocator to release memory.","Depends on how much memory is allocated, could be slow","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_PURGE_History,0,MEMORY_PURGE_Tips,2,memoryCommand,2,0,0,MEMORY_PURGE_Keyspecs,0,NULL,0)},
{MAKE_CMD("stats","Returns details about memory usage.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_STATS_History,0,MEMORY_STATS_Tips,3,memoryCommand,2,0,0,MEMORY_STATS_Keyspecs,0,NULL,0)},
{MAKE_CMD("usage","Estimates the memory usage of a key.","O(N) where N is the number of samples.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_USAGE_History,0,MEMORY_USAGE_Tips,0,memoryCommand,-3,CMD_READONLY,0,MEMORY_USAGE_Keyspecs,1,NULL,2),.args=MEMORY_USAGE_Args},
{0}
};

/********** MEMORY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY history */
#define MEMORY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY tips */
#define MEMORY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY key specs */
#define MEMORY_Keyspecs NULL
#endif

/********** MODULE HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE HELP history */
#define MODULE_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE HELP tips */
#define MODULE_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE HELP key specs */
#define MODULE_HELP_Keyspecs NULL
#endif

/********** MODULE LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LIST history */
#define MODULE_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LIST tips */
const char *MODULE_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LIST key specs */
#define MODULE_LIST_Keyspecs NULL
#endif

/********** MODULE LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LOAD history */
#define MODULE_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LOAD tips */
#define MODULE_LOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LOAD key specs */
#define MODULE_LOAD_Keyspecs NULL
#endif

/* MODULE LOAD argument table */
struct COMMAND_ARG MODULE_LOAD_Args[] = {
{MAKE_ARG("path",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** MODULE LOADEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LOADEX history */
#define MODULE_LOADEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LOADEX tips */
#define MODULE_LOADEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LOADEX key specs */
#define MODULE_LOADEX_Keyspecs NULL
#endif

/* MODULE LOADEX configs argument table */
struct COMMAND_ARG MODULE_LOADEX_configs_Subargs[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MODULE LOADEX argument table */
struct COMMAND_ARG MODULE_LOADEX_Args[] = {
{MAKE_ARG("path",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("configs",ARG_TYPE_BLOCK,-1,"CONFIG",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,2,NULL),.subargs=MODULE_LOADEX_configs_Subargs},
{MAKE_ARG("args",ARG_TYPE_STRING,-1,"ARGS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** MODULE UNLOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE UNLOAD history */
#define MODULE_UNLOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE UNLOAD tips */
#define MODULE_UNLOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE UNLOAD key specs */
#define MODULE_UNLOAD_Keyspecs NULL
#endif

/* MODULE UNLOAD argument table */
struct COMMAND_ARG MODULE_UNLOAD_Args[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MODULE command table */
struct COMMAND_STRUCT MODULE_Subcommands[] = {
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_HELP_History,0,MODULE_HELP_Tips,0,moduleCommand,2,CMD_LOADING|CMD_STALE,0,MODULE_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("list","Returns all loaded modules.","O(N) where N is the number of loaded modules.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LIST_History,0,MODULE_LIST_Tips,1,moduleCommand,2,CMD_ADMIN|CMD_NOSCRIPT,0,MODULE_LIST_Keyspecs,0,NULL,0)},
{MAKE_CMD("load","Loads a module.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LOAD_History,0,MODULE_LOAD_Tips,0,moduleCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_LOAD_Keyspecs,0,NULL,2),.args=MODULE_LOAD_Args},
{MAKE_CMD("loadex","Loads a module using extended parameters.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LOADEX_History,0,MODULE_LOADEX_Tips,0,moduleCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_LOADEX_Keyspecs,0,NULL,3),.args=MODULE_LOADEX_Args},
{MAKE_CMD("unload","Unloads a module.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_UNLOAD_History,0,MODULE_UNLOAD_Tips,0,moduleCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_UNLOAD_Keyspecs,0,NULL,1),.args=MODULE_UNLOAD_Args},
{0}
};

/********** MODULE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE history */
#define MODULE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE tips */
#define MODULE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE key specs */
#define MODULE_Keyspecs NULL
#endif

/********** MONITOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MONITOR history */
#define MONITOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MONITOR tips */
#define MONITOR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MONITOR key specs */
#define MONITOR_Keyspecs NULL
#endif

/********** PSYNC ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PSYNC history */
#define PSYNC_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PSYNC tips */
#define PSYNC_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PSYNC key specs */
#define PSYNC_Keyspecs NULL
#endif

/* PSYNC argument table */
struct COMMAND_ARG PSYNC_Args[] = {
{MAKE_ARG("replicationid",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** REPLCONF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* REPLCONF history */
#define REPLCONF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* REPLCONF tips */
#define REPLCONF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* REPLCONF key specs */
#define REPLCONF_Keyspecs NULL
#endif

/********** REPLICAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* REPLICAOF history */
#define REPLICAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* REPLICAOF tips */
#define REPLICAOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* REPLICAOF key specs */
#define REPLICAOF_Keyspecs NULL
#endif

/* REPLICAOF args host_port argument table */
struct COMMAND_ARG REPLICAOF_args_host_port_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* REPLICAOF args no_one argument table */
struct COMMAND_ARG REPLICAOF_args_no_one_Subargs[] = {
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("one",ARG_TYPE_PURE_TOKEN,-1,"ONE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* REPLICAOF args argument table */
struct COMMAND_ARG REPLICAOF_args_Subargs[] = {
{MAKE_ARG("host-port",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_host_port_Subargs},
{MAKE_ARG("no-one",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_no_one_Subargs},
};

/* REPLICAOF argument table */
struct COMMAND_ARG REPLICAOF_Args[] = {
{MAKE_ARG("args",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_Subargs},
};

/********** RESTORE_ASKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESTORE_ASKING history */
commandHistory RESTORE_ASKING_History[] = {
{"3.0.0","Added the `REPLACE` modifier."},
{"5.0.0","Added the `ABSTTL` modifier."},
{"5.0.0","Added the `IDLETIME` and `FREQ` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESTORE_ASKING tips */
#define RESTORE_ASKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESTORE_ASKING key specs */
keySpec RESTORE_ASKING_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RESTORE_ASKING argument table */
struct COMMAND_ARG RESTORE_ASKING_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ttl",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("absttl",ARG_TYPE_PURE_TOKEN,-1,"ABSTTL",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"IDLETIME",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("frequency",ARG_TYPE_INTEGER,-1,"FREQ",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** ROLE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ROLE history */
#define ROLE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ROLE tips */
#define ROLE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ROLE key specs */
#define ROLE_Keyspecs NULL
#endif

/********** SAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SAVE history */
#define SAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SAVE tips */
#define SAVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SAVE key specs */
#define SAVE_Keyspecs NULL
#endif

/********** SHUTDOWN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SHUTDOWN history */
commandHistory SHUTDOWN_History[] = {
{"7.0.0","Added the `NOW`, `FORCE` and `ABORT` modifiers."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SHUTDOWN tips */
#define SHUTDOWN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SHUTDOWN key specs */
#define SHUTDOWN_Keyspecs NULL
#endif

/* SHUTDOWN save_selector argument table */
struct COMMAND_ARG SHUTDOWN_save_selector_Subargs[] = {
{MAKE_ARG("nosave",ARG_TYPE_PURE_TOKEN,-1,"NOSAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("save",ARG_TYPE_PURE_TOKEN,-1,"SAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SHUTDOWN argument table */
struct COMMAND_ARG SHUTDOWN_Args[] = {
{MAKE_ARG("save-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SHUTDOWN_save_selector_Subargs},
{MAKE_ARG("now",ARG_TYPE_PURE_TOKEN,-1,"NOW",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("abort",ARG_TYPE_PURE_TOKEN,-1,"ABORT",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SLAVEOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLAVEOF history */
#define SLAVEOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLAVEOF tips */
#define SLAVEOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLAVEOF key specs */
#define SLAVEOF_Keyspecs NULL
#endif

/* SLAVEOF args host_port argument table */
struct COMMAND_ARG SLAVEOF_args_host_port_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SLAVEOF args no_one argument table */
struct COMMAND_ARG SLAVEOF_args_no_one_Subargs[] = {
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("one",ARG_TYPE_PURE_TOKEN,-1,"ONE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SLAVEOF args argument table */
struct COMMAND_ARG SLAVEOF_args_Subargs[] = {
{MAKE_ARG("host-port",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_host_port_Subargs},
{MAKE_ARG("no-one",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_no_one_Subargs},
};

/* SLAVEOF argument table */
struct COMMAND_ARG SLAVEOF_Args[] = {
{MAKE_ARG("args",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_Subargs},
};

/********** SLOWLOG GET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG GET history */
commandHistory SLOWLOG_GET_History[] = {
{"4.0.0","Added client IP address, port and name to the reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG GET tips */
const char *SLOWLOG_GET_Tips[] = {
"request_policy:all_nodes",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG GET key specs */
#define SLOWLOG_GET_Keyspecs NULL
#endif

/* SLOWLOG GET argument table */
struct COMMAND_ARG SLOWLOG_GET_Args[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SLOWLOG HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG HELP history */
#define SLOWLOG_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG HELP tips */
#define SLOWLOG_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG HELP key specs */
#define SLOWLOG_HELP_Keyspecs NULL
#endif

/********** SLOWLOG LEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG LEN history */
#define SLOWLOG_LEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG LEN tips */
const char *SLOWLOG_LEN_Tips[] = {
"request_policy:all_nodes",
"response_policy:agg_sum",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG LEN key specs */
#define SLOWLOG_LEN_Keyspecs NULL
#endif

/********** SLOWLOG RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG RESET history */
#define SLOWLOG_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG RESET tips */
const char *SLOWLOG_RESET_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG RESET key specs */
#define SLOWLOG_RESET_Keyspecs NULL
#endif

/* SLOWLOG command table */
struct COMMAND_STRUCT SLOWLOG_Subcommands[] = {
{MAKE_CMD("get","Returns the slow log's entries.","O(N) where N is the number of entries returned","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_GET_History,1,SLOWLOG_GET_Tips,2,slowlogCommand,-2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_GET_Keyspecs,0,NULL,1),.args=SLOWLOG_GET_Args},
{MAKE_CMD("help","Show helpful text about the different subcommands","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_HELP_History,0,SLOWLOG_HELP_Tips,0,slowlogCommand,2,CMD_LOADING|CMD_STALE,0,SLOWLOG_HELP_Keyspecs,0,NULL,0)},
{MAKE_CMD("len","Returns the number of entries in the slow log.","O(1)","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_LEN_History,0,SLOWLOG_LEN_Tips,3,slowlogCommand,2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_LEN_Keyspecs,0,NULL,0)},
{MAKE_CMD("reset","Clears all entries from the slow log.","O(N) where N is the number of entries in the slowlog","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_RESET_History,0,SLOWLOG_RESET_Tips,2,slowlogCommand,2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_RESET_Keyspecs,0,NULL,0)},
{0}
};

/********** SLOWLOG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG history */
#define SLOWLOG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG tips */
#define SLOWLOG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG key specs */
#define SLOWLOG_Keyspecs NULL
#endif

/********** SWAPDB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SWAPDB history */
#define SWAPDB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SWAPDB tips */
#define SWAPDB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SWAPDB key specs */
#define SWAPDB_Keyspecs NULL
#endif

/* SWAPDB argument table */
struct COMMAND_ARG SWAPDB_Args[] = {
{MAKE_ARG("index1",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index2",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SYNC ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SYNC history */
#define SYNC_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SYNC tips */
#define SYNC_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SYNC key specs */
#define SYNC_Keyspecs NULL
#endif

/********** TIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TIME history */
#define TIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TIME tips */
const char *TIME_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TIME key specs */
#define TIME_Keyspecs NULL
#endif

/********** SADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SADD history */
commandHistory SADD_History[] = {
{"2.4.0","Accepts multiple `member` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SADD tips */
#define SADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SADD key specs */
keySpec SADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SADD argument table */
struct COMMAND_ARG SADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCARD history */
#define SCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCARD tips */
#define SCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCARD key specs */
keySpec SCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SCARD argument table */
struct COMMAND_ARG SCARD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SDIFF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SDIFF history */
#define SDIFF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SDIFF tips */
const char *SDIFF_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SDIFF key specs */
keySpec SDIFF_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SDIFF argument table */
struct COMMAND_ARG SDIFF_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SDIFFSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SDIFFSTORE history */
#define SDIFFSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SDIFFSTORE tips */
#define SDIFFSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SDIFFSTORE key specs */
keySpec SDIFFSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SDIFFSTORE argument table */
struct COMMAND_ARG SDIFFSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SINTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTER history */
#define SINTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTER tips */
const char *SINTER_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTER key specs */
keySpec SINTER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SINTER argument table */
struct COMMAND_ARG SINTER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SINTERCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTERCARD history */
#define SINTERCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTERCARD tips */
#define SINTERCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTERCARD key specs */
keySpec SINTERCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* SINTERCARD argument table */
struct COMMAND_ARG SINTERCARD_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_INTEGER,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SINTERSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTERSTORE history */
#define SINTERSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTERSTORE tips */
#define SINTERSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTERSTORE key specs */
keySpec SINTERSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SINTERSTORE argument table */
struct COMMAND_ARG SINTERSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SISMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SISMEMBER history */
#define SISMEMBER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SISMEMBER tips */
#define SISMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SISMEMBER key specs */
keySpec SISMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SISMEMBER argument table */
struct COMMAND_ARG SISMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SMEMBERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMEMBERS history */
#define SMEMBERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMEMBERS tips */
const char *SMEMBERS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMEMBERS key specs */
keySpec SMEMBERS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMEMBERS argument table */
struct COMMAND_ARG SMEMBERS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SMISMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMISMEMBER history */
#define SMISMEMBER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMISMEMBER tips */
#define SMISMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMISMEMBER key specs */
keySpec SMISMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMISMEMBER argument table */
struct COMMAND_ARG SMISMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMOVE history */
#define SMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMOVE tips */
#define SMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMOVE key specs */
keySpec SMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMOVE argument table */
struct COMMAND_ARG SMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** SPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SPOP history */
commandHistory SPOP_History[] = {
{"3.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SPOP tips */
const char *SPOP_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SPOP key specs */
keySpec SPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SPOP argument table */
struct COMMAND_ARG SPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"3.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/********** SRANDMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SRANDMEMBER history */
commandHistory SRANDMEMBER_History[] = {
{"2.6.0","Added the optional `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SRANDMEMBER tips */
const char *SRANDMEMBER_Tips[] = {
